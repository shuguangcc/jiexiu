import{e as v,y as D,n as $e,m as Ee}from"./cast-a534ae90.js";import{a as ge,V as Ke,Q as qe,n as He}from"./cimAnalyzer-a68275f3.js";import{a as Ne}from"./HandleOwner-2edbba46.js";import{h as Ze}from"./string-480f3e3f.js";import{r as T,e as Ye,t as $}from"./typedArrayUtil-d9bc5fbd.js";import{f as x,j as H,w as ye}from"./promiseUtils-32d9c228.js";import{l as Qe}from"./reactiveUtils-5869e41a.js";import"./ensureType-25b8cc06.js";import{b as j,k as We}from"./Extent-a1a1de42.js";import{u as b,q as re,E as Xe,e as Je,s as et,l as tt}from"./aaBoundingRect-b340cf8c.js";import{v as st,b as it,c as rt,g as ot}from"./Polyline-b571c705.js";import{c as fe,y as he,f as _e,u as xe,s as ve,l as oe}from"./jsonUtils-c6684c52.js";import{p as nt}from"./normalizeUtilsSync-6d84346c.js";import{f as at,g as lt}from"./utils-44a68fd6.js";import{O as ht,a as dt,N as ct}from"./labelingInfo-c70ad911.js";import{U as ut}from"./definitions-2d0dd0cd.js";import{S as Ae}from"./enums-4ca4641f.js";import{K as pe,X as W,a as de,i as ft,s as pt,W as ee,G as mt,h as gt,g as yt}from"./Utils-a4216b91.js";import{a as ze,E as te}from"./VertexArrayObject-3630ef4f.js";import{F as ce,R as be,E as _t,C as Ge,I as xt}from"./enums-64ab819c.js";import{m as vt,i as bt,o as Dt}from"./FeatureContainer-e57c4b30.js";import{U as Ct}from"./MaterialKey-a0a08f8b.js";import{a as X,l as Bt,x as wt,b as Tt,n as Ft,E as Rt}from"./Matcher-acc26e80.js";import{w as De,$ as Mt}from"./schemaUtils-76874a61.js";import{c as St,r as It,v as Lt}from"./ComputedAttributeStorage-87b4df43.js";import{e as $t,C as At,h as zt,a as Gt,$ as Ot}from"./featureConversionUtils-d2229ed4.js";import{b as Ut}from"./FeatureSetReader-3d68adfe.js";import{u as N}from"./screenUtils-90993e16.js";import{i as Pt}from"./rbush-8e36784a.js";import{U as Oe}from"./normalizeUtils-0f537694.js";import{O as Vt,U as z}from"./utils-52ad3c09.js";import{t as Ue}from"./OptimizedFeature-73582c6e.js";import"./alignmentUtils-ae955d28.js";import"./mat2d-d0b91e3e.js";import"./vec2-ab9f47bf.js";import{t as kt}from"./vec2f32-461e65a9.js";import"./number-954e4ab6.js";import{s as jt}from"./Identifiable-093f90a8.js";import{l as Et}from"./capabilities-d08b6e58.js";import{createSymbolSchema as Kt}from"./createSymbolSchema-1bb8123a.js";import{r as qt,i as Ht,M as Nt,f as Zt,h as Yt}from"./mat3-9a8d9db7.js";import{e as Ce}from"./mat3f32-d3d088e8.js";import{r as Qt}from"./vec3f32-4322908d.js";import{r as Wt}from"./utils-0d179f64.js";const g=-1;let Be=class{constructor(){this._dirties=[{vertexFrom:g,vertexCount:g,indexFrom:g,indexCount:g,allDirty:!1},{vertexFrom:g,vertexCount:g,indexFrom:g,indexCount:g,allDirty:!1},{vertexFrom:g,vertexCount:g,indexFrom:g,indexCount:g,allDirty:!1},{vertexFrom:g,vertexCount:g,indexFrom:g,indexCount:g,allDirty:!1},{vertexFrom:g,vertexCount:g,indexFrom:g,indexCount:g,allDirty:!1}]}hasDirty(){return this._dirties.some(e=>e.indexCount!==g||e.allDirty)}markAllClean(){for(const e of this._dirties)e.indexFrom=g,e.indexCount=g,e.vertexFrom=g,e.vertexCount=g,e.allDirty=!1}markAllDirty(){for(const e of this._dirties)e.allDirty=!0}forEach(e){for(let t=0;t<this._dirties.length;++t){const{indexCount:s,indexFrom:i,vertexCount:r,vertexFrom:o,allDirty:a}=this._dirties[t],l={};let d,h=!1;(a||o!==g&&r>0)&&(l.geometry={count:r,from:o,allDirty:a},h=!0),(a||i!==g&&s>0)&&(d={count:s,from:i,allDirty:a},h=!0),h&&e({indices:d,vertices:l},t)}}markDirtyIndices(e,t,s){const i=this._dirties[e],r=t,o=s;if(!i.allDirty)if(i.indexCount!==g){const a=Math.min(i.indexFrom,r),l=Math.max(i.indexFrom+i.indexCount,r+o)-a;i.indexFrom=a,i.indexCount=l}else i.indexFrom=r,i.indexCount=o}markDirtyVertices(e,t,s,i){const r=this._dirties[e],o=s,a=i;if(!r.allDirty)if(r.vertexCount!==g){const l=Math.min(r.vertexFrom,o),d=Math.max(r.vertexFrom+r.vertexCount,o+a)-l;r.vertexFrom=l,r.vertexCount=d}else r.vertexFrom=o,r.vertexCount=a}},Xt=class{constructor(e){this._largestRange=null,this._parent=e,this._updateLargestRange()}get largestRange(){return this._largestRange}rangeCreated(e){(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}rangeResized(e,t){e===this._largestRange?e.count<t&&this._updateLargestRange():(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}findBestRange(e){let t=this._parent._freeHead,s=null;for(;t!==null;)t.count>=e&&(!s||t.count-e<s.count-e)&&(s=t),t=t.next;return s}findAdjacentRanges(e,t){let s=!0,i=!1,r=null,o=this._parent._freeHead;for(;s&&!i;){const a=r!==null?r.from+r.count:0,l=o!==null?o.from:this._parent._size;e>=a&&e+t<=l?(s=!1,i=!0):o!==null?(r=o,o=o.next):s=!1}return[r,o]}_updateLargestRange(){let e=null,t=this._parent._freeHead;for(;t!==null;)(!e||t.count>e.count)&&(e=t),t=t.next;this._largestRange=e}},F=class{constructor(e,t){this._allocated=0,this._size=e,this._freeHead=e>0?{from:0,count:e,prev:null,next:null}:null,this._bookKeeper=t||new Xt(this),this._freeHead&&this._bookKeeper.rangeCreated(this._freeHead)}allocate(e){const t=this._bookKeeper.findBestRange(e);if(t===null)return-1;const s=t.from,i=t.count;if(t.from+=e,t.count-=e,this._bookKeeper.rangeResized(t,s,i),this._allocated+=e,t.count===0){const r=t.prev!==null?this._freeHead:t.next;F._removeRange(t),this._freeHead=r}return s}free(e,t){const[s,i]=this._bookKeeper.findAdjacentRanges(e,t),r={from:e,count:t,prev:s,next:i};if(s!==null&&(s.next=r),i!==null&&(i.prev=r),this._bookKeeper.rangeCreated(r),this._allocated-=t,i!==null&&r.from+r.count===i.from){const o=r.from,a=r.count;F._fuse(r,i),F._removeRange(i),this._bookKeeper.rangeResized(r,o,a),this._bookKeeper.rangeResized(i,void 0,0)}if(s!==null&&s.from+s.count===r.from){const o=s.from,a=s.count;F._fuse(s,r),F._removeRange(r),this._bookKeeper.rangeResized(s,o,a),this._bookKeeper.rangeResized(r,void 0,0)}this._freeHead=r.prev!==null?this._freeHead:r}get fragmentation(){const e=this._size-this._allocated;return e===0?0:1-this._bookKeeper.largestRange.count/e}static _removeRange(e){e.prev!==null?e.next!==null?(e.prev.next=e.next,e.next.prev=e.prev):e.prev.next=null:e.next!==null&&(e.next.prev=null)}static _fuse(e,t){e.count+=t.count,e.next=t.next,t.from+=t.count,t.count=0,t.next!==null&&(t.next.prev=e)}};const U=["FILL","LINE","MARKER","TEXT","LABEL"];function Jt(n){const e=n.getStrides(),t={};for(let s=0;s<e.length;s++)t[U[s]]=e[s];return t}const we=.5;let ue=class{constructor(e,t,s,i){this._strides=e,this._displayList=t,this._freeListsAndStorage={},this._dirtyMap=null,this._dirtyMap=s;for(const r in e){this._freeListsAndStorage[r]={vtxFreeList:i?new F(i):null,idxFreeList:i?new F(i):null,vertexBuffers:{},indexBuffer:i?new Uint32Array(i):null};for(const o in e[r])this._freeListsAndStorage[r].vertexBuffers[o]={data:i?pe(i,e[r][o]):null,stride:e[r][o]}}}static fromTileData(e,t){const s=Jt(e),i=[0,0,0,0,0],r=[0,0,0,0,0],o=e.tileDisplayData.displayObjects;for(const l of o)for(const d of l.displayRecords)i[d.geometryType]=Math.max(i[d.geometryType],d.vertexFrom+d.vertexCount),r[d.geometryType]=Math.max(r[d.geometryType],d.indexFrom+d.indexCount);const a=new ue(s,e.tileDisplayData.displayList,t,null);for(let l=0;l<e.tileBufferData.geometries.length;++l){const d=i[l],h=r[l],c=e.tileBufferData.geometries[l],u=U[l],p=a._storageFor(u),f=e.tileBufferData.geometries[l].indexBuffer;let m;p.indexBuffer=f,p.idxFreeList=new F(f.length),p.idxFreeList.allocate(h);for(const _ in c.vertexBuffer){const y=e.tileBufferData.geometries[l].vertexBuffer[_];p.vertexBuffers[_].data=y.data,p.vertexBuffers[_].stride=y.stride;const M=W(y.stride),q=y.data.length*M/y.stride;m||(m=q)}p.vtxFreeList=new F(m),p.vtxFreeList.allocate(d)}return a}delete(e){const t=U[e.geometryType];this._freeVertices(t,e.vertexFrom,e.vertexCount),this._freeIndices(t,e.indexFrom,e.indexCount),this._displayList.removeFromList(e),e.vertexFrom=void 0,e.indexFrom=void 0}setMeshData(e,t,s,i,r){const o=U[e.geometryType];let a,l;e.meshData=null,e.vertexFrom===void 0?(l=t.vertexCount,a=this._allocateVertices(o,l)):t.vertexCount>e.vertexCount?(this._freeVertices(o,e.vertexFrom,e.vertexCount),l=t.vertexCount,a=this._allocateVertices(o,l)):t.vertexCount===e.vertexCount?(a=e.vertexFrom,l=e.vertexCount):(this._freeVertices(o,e.vertexFrom+t.vertexCount,e.vertexCount-t.vertexCount),a=e.vertexFrom,l=t.vertexCount);let d,h,c,u=!0;if(e.indexFrom===void 0?(d=r,c=t.indexCount,h=this._allocateIndices(o,c)):t.indexCount>e.indexCount?(d=this._displayList.removeFromList(e),this._freeIndices(o,e.indexFrom,e.indexCount),c=t.indexCount,h=this._allocateIndices(o,c)):t.indexCount===e.indexCount?(u=!1,h=e.indexFrom,c=e.indexCount):(d=this._displayList.removeFromList(e),this._freeIndices(o,e.indexFrom+t.indexCount,e.indexCount-t.indexCount),h=e.indexFrom,c=t.indexCount),a!==-1&&h!==-1){const p=this._storageFor(o);if(de(a,h,p.vertexBuffers,p.indexBuffer,t,s,i),e.vertexFrom=a,e.indexFrom=h,e.vertexCount=t.vertexCount,e.indexCount=t.indexCount,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const f in s)this._dirtyMap.markDirtyVertices(e.geometryType,f,e.vertexFrom,e.vertexCount)}return u&&this._displayList.addToList(e,d),!0}return a!==-1&&this._freeVertices(o,a,l),h!==-1&&this._freeIndices(o,h,c),e.setMeshDataFromBuffers(t,s,i),e.vertexFrom=void 0,e.vertexCount=0,e.indexFrom=void 0,e.indexCount=0,!1}tryAddMeshData(e,t){const s=t.vertexBuffer,i=t.indexBuffer,r=U[e.geometryType],o=this._allocateVertices(r,e.vertexCount);if(o===-1)return this._freeVertices(r,o,e.vertexCount),!1;const a=this._allocateIndices(r,e.indexCount);if(a===-1)return this._freeVertices(r,o,e.vertexCount),this._freeIndices(r,a,e.indexCount),!1;const l=this._storageFor(r);if(de(o,a,l.vertexBuffers,l.indexBuffer,e,s,i),e.vertexFrom=o,e.indexFrom=a,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const d in s)this._dirtyMap.markDirtyVertices(e.geometryType,d,o,e.vertexCount)}return this._displayList.addToList(e),!0}_allocateVertices(e,t){const s=this._storageFor(e),i=s.vtxFreeList.allocate(t);return i===-1||s.vtxFreeList.fragmentation>we?-1:i}_freeVertices(e,t,s){this._storageFor(e).vtxFreeList.free(t,s)}_freeIndices(e,t,s){this._storageFor(e).idxFreeList.free(t,s)}_allocateIndices(e,t){const s=this._storageFor(e),i=s.idxFreeList.allocate(t);return i===-1||s.idxFreeList.fragmentation>we?-1:i}_storageFor(e){return this._freeListsAndStorage[e]}_stridesFor(e,t){return this._strides[e][t]}},es=class{constructor(e){this.geometryMap=ft(()=>({indexBuffer:te.createIndex(e,ce.STATIC_DRAW),vao:null}),(t,s)=>({vertexBuffer:te.createVertex(e,pt[s])}))}dispose(){for(let e=0;e<5;e++){const t=this.geometryMap[e];if(t){t.data.vao&&t.data.vao.dispose(!1),t.data.indexBuffer&&t.data.indexBuffer.dispose();for(const s in t.buffers)t.buffers[s]&&t.buffers[s].data.vertexBuffer.dispose()}}}get(e){const t=this.geometryMap[e];return{getVAO(s,i,r){if(!t.data.vao){const o={};for(const a in t.buffers)o[a]=t.buffers[a].data.vertexBuffer;t.data.vao=new ze(s,r,i,o,t.data.indexBuffer)}return t.data.vao}}}has(e){return this.geometryMap[e]!=null}upload(e,t){t.forEach((s,i)=>{this._upload(s,i,e)})}_upload(e,t,s){if(e.indices&&(e.indices.allDirty?this._uploadIndices(s,t):e.indices.from!=null&&e.indices.count!=null&&this._uploadIndices(s,t,e.indices.from,e.indices.count)),e.vertices){const i=e.vertices;for(const r in i){const o=i[r];o.allDirty?this._uploadVertices(s,t,r):o.from!=null&&o.count!=null&&this._uploadVertices(s,t,r,o.from,o.count)}}}_uploadVertices(e,t,s,i,r){const o=this.geometryMap[t];if(!o)return;const a=e.geometries[t].vertexBuffer[s];if(!a)return;const{data:l,stride:d}=a;if(o.buffers[s]&&l.length>0){const h=d/l.BYTES_PER_ELEMENT;i!=null&&r!=null?o.buffers[s].data.vertexBuffer.setSubData(l,i*h,i*h,(i+r)*h):o.buffers[s].data.vertexBuffer.setData(l)}}_uploadIndices(e,t,s,i){const r=this.geometryMap[t];if(!r)return;const o=e.geometries[t].indexBuffer;r.data.indexBuffer&&o.length>0&&(s!=null&&i!=null?r.data.indexBuffer.setSubData(o,s,s,s+i):r.data.indexBuffer.setData(o))}};class ts extends vt{constructor(){super(...arguments),this._data=null,this._displayList=null,this._lastCommitTime=0,this._hasData=!1,this._invalidated=!1,this._wglBuffers=null,this._dirtyMap=new Be}destroy(){super.destroy(),this.clear()}get hasData(){return!!this._hasData}get displayObjects(){return this._displayObjects??[]}getGeometry(e){return this._wglBuffers&&this._wglBuffers.has(e)?this._wglBuffers.get(e):null}getDisplayList(){return this._displayList}patch(e){if(e.clear===!0)return this.clear(),void(this._hasData=!1);const t=e.addOrUpdate,s=e.remove;!this._data&&t&&t.tileDisplayData.displayObjects.length?(t.tileDisplayData.computeDisplayList(),this._dirtyMap=new Be,this._dispRecStore=ue.fromTileData(t,this._dirtyMap),this._data=t,this._dirtyMap.markAllDirty(),this._hasData=!0,e.end&&this.ready()):this._data&&(t&&t.tileDisplayData.displayObjects.length||s.length)?this._doPatchData(e):e.end&&this.ready(),e.end&&!this._data&&this.clear(),this.requestRender(),this.emit("change")}commit(e){e.time&&e.time===this._lastCommitTime||(this._lastCommitTime=e.time,this.visible&&this._data&&(this._wglBuffers||(this._wglBuffers=new es(e.context)),(this._dirtyMap.hasDirty()||this._invalidated)&&(this._invalidated=!1,this._wglBuffers.upload(this._data.tileBufferData,this._dirtyMap),this._displayList=this._data.tileDisplayData.displayList.clone(),this._displayObjects=this._data.tileDisplayData.displayObjects.slice(),this._dirtyMap.markAllClean())))}clear(){this._data=null,this._displayList=null,this._dispRecStore=null,this._wglBuffers&&(this._wglBuffers.dispose(),this._wglBuffers=null)}_doPatchData(e){this._invalidated=!0,this._patchData(e)||(this._dirtyMap.markAllDirty(),this._data.reshuffle(),this._dispRecStore=ue.fromTileData(this._data,this._dirtyMap)),this.requestRender()}_patchData(e){let t=!0;const s=e.addOrUpdate&&e.addOrUpdate.tileDisplayData&&e.addOrUpdate.tileDisplayData.displayObjects||[],i=(e.remove||[]).slice();for(const o of s)o.insertAfter!=null&&i.push(o.id);let r;i.length>0&&(r=new Set(i));for(const o of i){const a=this._data.tileDisplayData.displayObjectRegistry.get(o);if(a){this._data.tileDisplayData.displayList.removeFromList(a.displayRecords);for(const l of a.displayRecords)this._dispRecStore.delete(l);this._data.tileDisplayData.displayObjectRegistry.delete(o)}}r&&r.size&&(this._data.tileDisplayData.displayObjects=this._data.tileDisplayData.displayObjects.filter(o=>!r.has(o.id)));for(const o of s){let a,l=this._data.tileDisplayData.displayObjectRegistry.get(o.id);if(l){const h=l.displayRecords;l.set(o),l.displayRecords=h;const c=l.displayRecords.length;for(let u=0;u<c;++u){const p=l.displayRecords[u],f=o.displayRecords[u];(u>=o.displayRecords.length||p.geometryType!==f.geometryType||p.symbolLevel!==f.symbolLevel||p.zOrder!==f.zOrder||p.materialKey!==f.materialKey)&&(this._dispRecStore.delete(l.displayRecords[u]),u<o.displayRecords.length&&(l.displayRecords[u]=void 0))}l.displayRecords.length=o.displayRecords.length}else{let h;l=o.copy(),l.displayRecords=[],this._data.tileDisplayData.displayObjectRegistry.set(o.id,l);const c=this._data.tileDisplayData.displayObjects;if(l.insertAfter!=null)if(a={},l.insertAfter>=0){const u=this._data.tileDisplayData.displayObjectRegistry.get(l.insertAfter);u?(h=c.indexOf(u)+1,h<c.length?c.splice(h,0,l):(c.push(l),h=c.length)):(c.push(l),h=c.length)}else c.unshift(l),h=0;else c.push(l),h=c.length;if(a){const u=o.displayRecords.length>0?1:0;let p=0;for(let f=h-1;f>=0&&p<u;--f)for(let m=c[f].displayRecords.length-1;m>=0&&p<u;--m){const _=c[f].displayRecords[m],y=this._data.tileDisplayData.displayList.getDPInfoType();a[y]||(a[y]=_,++p)}}}const d=o.displayRecords.length;for(let h=0;h<d;++h){const c=o.displayRecords[h];let u=l.displayRecords[h];u?(u.meshData=c.meshData,u.materialKey=c.materialKey):(u=c.copy(),u.vertexFrom=void 0,u.indexFrom=void 0,l.displayRecords[h]=u);const p=c.geometryType,f=this._data.tileDisplayData.displayList.getDPInfoType(),m=e.addOrUpdate.tileBufferData.geometries[p],_=m.vertexBuffer,y=m.indexBuffer;let M;a&&(M=a[f]?this._data.tileDisplayData.displayList.splitAfter(a[f]):-1),t=this._dispRecStore.setMeshData(u,c,_,y,M)&&t,a&&u.indexFrom!=null&&u.indexFrom!=null&&(a[f]=u)}}return t}}let Pe=class{constructor(){this._byGeometryType=null}get satisfied(){return!this._byGeometryType}reset(){this._byGeometryType=null}verticesFor(e){return this._byGeometryType?this._byGeometryType[e].vertices:0}indicesFor(e){return this._byGeometryType?this._byGeometryType[e].indices:0}needMore(e,t,s){if(!t&&!s)return;this._byGeometryType||(this._byGeometryType=[{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0}]);const i=this._byGeometryType[e];i.vertices+=t,i.indices+=s}};const ne=5;let P=class{constructor(){this.geometries=[{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}}]}clone(){const e=new P;for(let t=0;t<this.geometries.length;t++){const s=this.geometries[t],i=e.geometries[t];i.indexBuffer=s.indexBuffer.slice(),i.vertexBuffer={};for(const r in s.vertexBuffer){const{data:o,stride:a}=s.vertexBuffer[r];i.vertexBuffer[r]={data:o.slice(),stride:a}}}return e}static deserialize(e){const t=new P;for(let s=0;s<ne;++s){t.geometries[s].indexBuffer=new Uint32Array(e.geometries[s].indexBuffer),t.geometries[s].vertexBuffer={};for(const i in e.geometries[s].vertexBuffer)t.geometries[s].vertexBuffer[i]={data:ee(e.geometries[s].vertexBuffer[i].data,e.geometries[s].vertexBuffer[i].stride),stride:e.geometries[s].vertexBuffer[i].stride}}return t}serialize(){const e={geometries:[{indexBuffer:this.geometries[0].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[1].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[2].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[3].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[4].indexBuffer.buffer,vertexBuffer:{}}]};for(let t=0;t<ne;++t)for(const s in this.geometries[t].vertexBuffer)e.geometries[t].vertexBuffer[s]={data:this.geometries[t].vertexBuffer[s].data.buffer,stride:this.geometries[t].vertexBuffer[s].stride};return e}getBuffers(){const e=[];for(let t=0;t<ne;++t){e.push(this.geometries[t].indexBuffer.buffer);for(const s in this.geometries[t].vertexBuffer)e.push(this.geometries[t].vertexBuffer[s].data.buffer)}return e}};function Z(n,e,t,...s){e<n.length?n.splice(e,t,...s):n.push(...s)}let Ve=class{constructor(){this.symbolLevels=[]}replay(e,t,s){for(const i of this.symbolLevels)for(const r of i.zLevels){const o=r.geometryDPInfo.unified;if(o)for(const a of o){const{geometryType:l,materialKey:d,indexFrom:h,indexCount:c}=a,u=Ct.load(d).symbologyType,p=e.painter.getBrush(l,u),f={geometryType:l,materialKey:d,indexFrom:h,indexCount:c,target:t.getGeometry(l)};p.prepareState(e),p.drawGeometry(e,t,f,s)}}}get empty(){return!this.symbolLevels||this.symbolLevels.length===0}clear(){this.symbolLevels.length=0}addToList(e,t){if(Array.isArray(e))for(const s of e)this._addToList(s,t);else this._addToList(e,t)}removeFromList(e){Array.isArray(e)||(e=[e]);let t=null;for(const s of e)t=this._removeFromList(s);return t}clone(){const e=new Ve;for(const t of this.symbolLevels)e.symbolLevels.push(t.clone());return e}splitAfter(e){const t=this._getDisplayList(e.symbolLevel,e.zOrder),s=t.length,i=e.indexFrom+e.indexCount;for(let r=0;r<s;++r){const o=t[r];if(o.geometryType===e.geometryType&&i>o.indexFrom&&i<=o.indexFrom+o.indexCount){if(i<o.indexFrom+o.indexCount){const a=new J;a.geometryType=o.geometryType,a.materialKey=o.materialKey,a.indexFrom=i,a.indexCount=o.indexFrom+o.indexCount-i,t.splice(r+1,0,a),o.indexCount=i-o.indexFrom}return r}}}_addToList(e,t){const s=e.symbolLevel,i=e.zOrder,r=this._getDisplayList(s,i),o=t??r.length-1,a=o>=0&&o<r.length?r[o]:null;if(a!==null&&a.materialKey===e.materialKey&&a.indexFrom+a.indexCount===e.indexFrom&&a.geometryType===e.geometryType)a.indexCount+=e.indexCount;else{const l=new J;l.indexFrom=e.indexFrom,l.indexCount=e.indexCount,l.materialKey=e.materialKey,l.geometryType=e.geometryType,Z(r,o+1,0,l)}}_removeFromList(e){const t=e.symbolLevel,s=e.zOrder,i=this._getDisplayList(t,s),r=i.length;let o;for(let a=0;a<r;++a){const l=i[a];if(e.indexFrom+e.indexCount>l.indexFrom&&e.indexFrom<l.indexFrom+l.indexCount&&l.geometryType===e.geometryType){o=a;break}}if(o!==void 0){const a=i[o];if(e.indexFrom===a.indexFrom)return a.indexCount-=e.indexCount,a.indexFrom+=e.indexCount,a.indexCount===0&&Z(i,o,1),o-1;if(e.indexFrom+e.indexCount===a.indexFrom+a.indexCount)return a.indexCount-=e.indexCount,a.indexCount===0?(Z(i,o,1),o-1):o;{const l=a.indexFrom,d=e.indexFrom-a.indexFrom,h=e.indexCount,c=a.indexFrom+a.indexCount-(e.indexFrom+e.indexCount);a.indexCount=d;const u=new J;return u.geometryType=a.geometryType,u.materialKey=a.materialKey,u.indexFrom=l+d+h,u.indexCount=c,Z(i,o+1,0,u),o}}return null}_getDisplayList(e,t){let s;const i=this.symbolLevels.length;for(let a=0;a<i;a++)if(this.symbolLevels[a].symbolLevel===e){s=this.symbolLevels[a];break}let r;s||(s=new me,s.symbolLevel=e,this.symbolLevels.push(s));const o=s.zLevels.length;for(let a=0;a<o;a++)if(s.zLevels[a].zLevel===t){r=s.zLevels[a];break}return r||(r=new ke,r.geometryDPInfo=new ie,r.zLevel=t,s.zLevels.push(r)),r.geometryDPInfo.unified||(r.geometryDPInfo.unified=[]),r.geometryDPInfo.unified}getDPInfoType(){return"unified"}},J=class{constructor(){this.materialKey=null,this.indexFrom=0,this.indexCount=0}clone(){const e=new J;return e.geometryType=this.geometryType,e.materialKey=this.materialKey,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e}};class ie{constructor(){this.fill=null,this.line=null,this.marker=null,this.text=null,this.label=null,this.unified=null}clone(){const e=new ie;return e.fill=this.fill&&this.fill.map(t=>t.clone()),e.line=this.line&&this.line.map(t=>t.clone()),e.marker=this.marker&&this.marker.map(t=>t.clone()),e.text=this.text&&this.text.map(t=>t.clone()),e.label=this.label&&this.label.map(t=>t.clone()),e.unified=this.unified&&this.unified.map(t=>t.clone()),e}}let ke=class{constructor(){this.geometryDPInfo=new ie}clone(){const e=new ke;return e.zLevel=this.zLevel,e.geometryDPInfo=this.geometryDPInfo.clone(),e}};class me{constructor(){this.zLevels=[]}clone(){const e=new me;e.symbolLevel=this.symbolLevel;for(const t of this.zLevels)e.zLevels.push(t.clone());return e}}let Te=class{constructor(){this.vertexData=new Map,this.vertexCount=0,this.indexData=[]}clear(){this.vertexData.clear(),this.vertexCount=0,this.indexData=[]}update(e,t,s){for(const i in e)this.vertexData.set(i,e[i]);for(const i in this.vertexData)e[i]===null&&this.vertexData.delete(i);this.vertexCount=t,this.indexData=s}},E=class{constructor(e,t,s,i=0,r=0){this.id=e,this.geometryType=t,this.materialKey=s,this.minZoom=i,this.maxZoom=r,this.meshData=null,this.symbolLevel=0,this.zOrder=0,this.vertexFrom=0,this.vertexCount=0,this.indexFrom=0,this.indexCount=0}get sortKey(){return this._sortKey===void 0&&this._computeSortKey(),this._sortKey}clone(){return this.copy()}copy(){const e=new E(this.id,this.geometryType,this.materialKey);return e.vertexFrom=this.vertexFrom,e.vertexCount=this.vertexCount,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e.zOrder=this.zOrder,e.symbolLevel=this.symbolLevel,e.meshData=this.meshData,e.minZoom=this.minZoom,e.maxZoom=this.maxZoom,e}setMeshDataFromBuffers(e,t,s){const i=new Te;for(const r in t){const o=t[r].stride,a=t[r].data,l=[],d=W(o);for(let h=0;h<o*e.vertexCount/d;++h)l[h]=a[h+o*e.vertexFrom/d];i.vertexData.set(r,l)}i.indexData.length=0;for(let r=0;r<e.indexCount;++r)i.indexData[r]=s[r+e.indexFrom]-e.vertexFrom;i.vertexCount=e.vertexCount,this.meshData=i}readMeshDataFromBuffers(e,t){this.meshData?this.meshData.clear():this.meshData=new Te;for(const s in e){const i=e[s].stride,r=e[s].data,o=[],a=W(i);for(let l=0;l<i*this.vertexCount/a;++l)o[l]=r[l+i*this.vertexFrom/a];this.meshData.vertexData.set(s,o)}this.meshData.indexData.length=0;for(let s=0;s<this.indexCount;++s)this.meshData.indexData[s]=t[s+this.indexFrom]-this.vertexFrom;this.meshData.vertexCount=this.vertexCount}writeMeshDataToBuffers(e,t,s,i){for(const r in t){const o=t[r].stride,a=this.meshData.vertexData.get(r),l=t[r].data,d=W(o);for(let h=0;h<o*this.meshData.vertexCount/d;++h)l[h+o*e/d]=a[h]}for(let r=0;r<this.meshData.indexData.length;++r)i[r+s]=this.meshData.indexData[r]+e;this.vertexFrom=e,this.vertexCount=this.meshData.vertexCount,this.indexFrom=s,this.indexCount=this.meshData.indexData.length}static writeAllMeshDataToBuffers(e,t,s){let i=0,r=0;for(const o of e)o.writeMeshDataToBuffers(i,t,r,s),i+=o.vertexCount,r+=o.indexCount}_computeSortKey(){this._sortKey=(31&this.symbolLevel)<<12|(127&this.zOrder)<<4|7&this.geometryType}serialize(e){return e.push(this.geometryType),e.push(this.materialKey),e.push(this.vertexFrom),e.push(this.vertexCount),e.push(this.indexFrom),e.push(this.indexCount),e.push(this.minZoom),e.push(this.maxZoom),e}static deserialize(e,t){const s=e.readInt32(),i=e.readInt32(),r=new E(t.id,s,i);return r.vertexFrom=e.readInt32(),r.vertexCount=e.readInt32(),r.indexFrom=e.readInt32(),r.indexCount=e.readInt32(),r.minZoom=e.readInt32(),r.maxZoom=e.readInt32(),r}};function je(n,e){if(e!==null){n.push(e.length);for(const t of e)t.serialize(n);return n}n.push(0)}function ss(n,e,t){const s=n.readInt32(),i=new Array(s);for(let r=0;r<i.length;r++)i[r]=e.deserialize(n,t);return i}let V=class{constructor(e){this.insertAfter=null,this.id=e,this.displayRecords=[]}copy(){const e=new V(this.id);return e.set(this),e}clone(){const e=new V(this.id);return e.displayRecords=this.displayRecords.map(t=>t.clone()),e.insertAfter=this.insertAfter,e}set(e){this.id=e.id,this.displayRecords=e.displayRecords,this.insertAfter=e.insertAfter}serialize(e){return e.push(this.id),je(e,this.displayRecords),e}static deserialize(e){const t=e.readInt32(),s=new V(t),i={id:t};return s.displayRecords=ss(e,E,i),s}};class K{get displayObjectRegistry(){if(!this._displayObjectRegistry){this._displayObjectRegistry=new Map;for(const e of this.displayObjects)this._displayObjectRegistry.set(e.id,e)}return this._displayObjectRegistry}get displayList(){return this._displayList}computeDisplayList(){this._displayList=new Ve;for(const e of this.displayObjects)for(const t of e.displayRecords)this._displayList.addToList(t)}clone(){const e=new K;return this.displayObjects&&(e.displayObjects=this.displayObjects.map(t=>t.clone())),e}serialize(e){return je(e,this.displayObjects),e}_deserializeObjects(e){const t=e.readInt32(),s=new Array(t),i=new Map;for(let r=0;r<s.length;++r){const o=V.deserialize(e);s[r]=o,i.set(o.id,o)}this.displayObjects=s,this._displayList=null,this._displayObjectRegistry=i}static deserialize(e){const t=new K;return t._deserializeObjects(e),t}}let k=class{constructor(e,t){this.data=e,this.stride=t}static decode(e){const t=ee(e.data,e.stride),s=e.stride;return new k(t,s)}static fromVertexVector(e){const t=ee(e.data.buffer(),e.stride),s=e.stride;return new k(t,s)}};class A{constructor(e,t,s){this.geometryType=e,this.indexBuffer=new Uint32Array(t),this.namedBuffers=s}static decode(e){const t=e.geometryType,s=e.indexBuffer,i={};for(const r in e.namedBuffers)i[r]=k.decode(e.namedBuffers[r]);return new A(t,s,i)}static fromVertexData(e,t){const s=e.indices,i=ee(e.vertices,e.stride),r=e.stride,o={geometry:new k(i,r)};return new A(t,s,o)}static fromVertexVectors(e){const t=e.geometryType,s=e.indexVector.buffer(),i={};for(const r in e.namedVectors)i[r]=k.fromVertexVector(e.namedVectors[r]);return new A(t,s,i)}}class is{constructor(e,t){this.data=e,this.stride=t}get vertexCount(){const e=this.stride/4,t=this.data.length/e;return t!==(0|t)&&console.debug("Corrupted stride"),t}transfer(e,t){const s=this.data.buffer();e.vertexCount=this.vertexCount,e.data=s,e.stride=this.stride,t.push(s)}}let rs=class{constructor(e,t,s){this.geometryType=e,this.indexVector=new X(Uint32Array,6*t),this.namedVectors={};const i=mt(e,s);for(const r in i){const o=i[r];let a;switch(o%4){case 0:case 2:a=new X(Uint32Array,o*t);break;case 1:case 3:a=new X(Uint8Array,o*t)}this.namedVectors[r]=new is(a,o)}}get(e){return this.namedVectors[e].data}getVector(e){return this.namedVectors[e]}transfer(e,t){const s=this.indexVector.buffer(),i={};t.push(s);for(const r in this.namedVectors){const o=this.namedVectors[r];i[r]={},o.transfer(i[r],t)}e.geometryType=this.geometryType,e.indexBuffer=s,e.namedBuffers=i,this.destroy()}intoBuffers(){const e=A.fromVertexVectors(this);return this.destroy(),e}destroy(){this.indexVector=null,this.namedVectors=null}};const Y=new Pe,S=new Pe,Fe=1.5,os=5;function ns(n,e){const t={};for(const s in n){const i={data:pe(e,n[s]),stride:n[s]};t[s]=i}return t}function as(n){return[n.fill||{},n.line||{},n.icon||{},n.text||{},n.label||{}]}function ls(n){const e=[[],[],[],[],[]],t=n;for(const s of t)for(const i of s.displayRecords)e[i.geometryType].push(i);return e}let B=class{constructor(){this.tileDisplayData=null,this.tileBufferData=null}reshuffle(){Y.reset();const e=ls(this.tileDisplayData.displayObjects);for(const i of e)for(const r of i)r&&Y.needMore(r.geometryType,r.meshData?r.meshData.vertexCount:r.vertexCount,r.meshData?r.meshData.indexData.length:r.indexCount);const t=e.length,s=new P;for(let i=0;i<t;++i){s.geometries[i].indexBuffer=new Uint32Array(Math.round(Fe*Y.indicesFor(i)));const r=[];for(const d in this.tileBufferData.geometries[i].vertexBuffer)r.push(this.tileBufferData.geometries[i].vertexBuffer[d].stride);const o=B._computeVertexAlignment(r),a=Math.round(Fe*Y.verticesFor(i)),l=B._align(a,o);for(const d in this.tileBufferData.geometries[i].vertexBuffer){const h=this.tileBufferData.geometries[i].vertexBuffer[d].stride;s.geometries[i].vertexBuffer[d]={stride:h,data:pe(l,h)}}}S.reset(),this.tileDisplayData.displayList.clear();for(let i=0;i<t;++i){const r=e[i];for(const o of r){if(o.meshData)o.writeMeshDataToBuffers(S.verticesFor(i),s.geometries[i].vertexBuffer,S.indicesFor(i),s.geometries[i].indexBuffer),o.meshData=null;else{const a=this.tileBufferData.geometries[i].vertexBuffer,l=this.tileBufferData.geometries[i].indexBuffer,d=s.geometries[i].vertexBuffer,h=s.geometries[i].indexBuffer,c=S.verticesFor(i),u=S.indicesFor(i);de(c,u,d,h,o,a,l),o.vertexFrom=c,o.indexFrom=u}S.needMore(i,o.vertexCount,o.indexCount)}}for(const i of this.tileDisplayData.displayObjects)this.tileDisplayData.displayList.addToList(i.displayRecords);this.tileBufferData=s}getStrides(){const e=[];for(let t=0;t<this.tileBufferData.geometries.length;++t){const s=this.tileBufferData.geometries[t];e[t]={};for(const i in s.vertexBuffer)e[t][i]=s.vertexBuffer[i].stride}return e}clone(){const e=new B;return e.tileBufferData=this.tileBufferData.clone(),e.tileDisplayData=this.tileDisplayData.clone(),e}_guessSize(){const{displayObjects:e}=this.tileDisplayData,t=Math.min(e.length,4),s=12,i=40;let r=0;for(let o=0;o<t;o++)r=Math.max(r,e[o].displayRecords.length);return 2*(e.length*s+e.length*r*i)}serialize(){const e=this.tileBufferData.serialize(),t=this.tileBufferData.getBuffers(),s=this.tileDisplayData.serialize(new X(Int32Array,this._guessSize())).buffer();return t.push(s),{result:{displayData:s,bufferData:e},transferList:t}}static fromVertexData(e,t){const s={},i=new Map;for(const r of t)i.set(r.id,r);return gt(r=>{const o=e.data[r];if(T(o)){const a=bt.from(o.records).getCursor();for(;a.next();){const l=a.id,d=a.materialKey,h=a.indexFrom,c=a.indexCount,u=a.vertexFrom,p=a.vertexCount,f=i.get(l),m=new E(l,r,d);m.indexFrom=h,m.indexCount=c,m.vertexFrom=u,m.vertexCount=p,f.displayRecords.push(m)}s[r]=A.fromVertexData(o,r)}else s[r]=new rs(r,0,Ae.DEFAULT).intoBuffers()}),B.fromMeshData({displayObjects:t,vertexBuffersMap:s})}static fromMeshData(e){const t=new B,s=new K,i=new P;s.displayObjects=e.displayObjects;for(const r in e.vertexBuffersMap){const o=e.vertexBuffersMap[r];i.geometries[r].indexBuffer=o.indexBuffer,i.geometries[r].vertexBuffer=o.namedBuffers}return t.tileDisplayData=s,t.tileBufferData=i,t}static bind(e,t){const s=new B;return s.tileDisplayData=e,s.tileBufferData=t,s}static create(e,t){const s=new B;s.tileDisplayData=new K,s.tileDisplayData.displayObjects=e;const i=[0,0,0,0,0],r=[0,0,0,0,0],o=[[],[],[],[],[]];for(const d of e)for(const h of d.displayRecords)o[h.geometryType].push(h),i[h.geometryType]+=h.meshData.vertexCount,r[h.geometryType]+=h.meshData.indexData.length;const a=new P,l=as(t);for(let d=0;d<os;d++){const h=new Uint32Array(r[d]),c=ns(l[d],i[d]);E.writeAllMeshDataToBuffers(o[d],c,h),a.geometries[d]={indexBuffer:h,vertexBuffer:c}}return s.tileBufferData=a,s}static _align(e,t){const s=e%t;return s===0?e:e+(t-s)}static _computeVertexAlignment(e){let t=!1,s=!1;for(const i of e)i%4==2?t=!0:i%4!=0&&(s=!0);return s?4:t?2:1}};const I=512,w=50;function hs(n,e){const t=j(e);if(!t)return null;const[s,i]=t.valid;return n[2]>i?[b([n[0],n[1],i,n[3]]),b([s,n[1],s+n[2]-i,n[3]])]:n[0]<s?[b([s,n[1],n[2],n[3]]),b([i-(s-n[0]),n[1],i,n[3]])]:null}function ds(n){return n==="text"||n==="esriTS"}function cs(n){return n==="simple-marker"||n==="picture-marker"||n==="esriSMS"||n==="esriPMS"}function Re(n){switch(Ye(n.geometry).type){case"point":case"multipoint":return 0;case"polyline":return 1;case"polygon":case"extent":return 2}return 0}function us(n){if(!n)return null;const{xmin:e,ymin:t,xmax:s,ymax:i,spatialReference:r}=n;return new st({rings:[[[e,t],[e,i],[s,i],[s,t],[e,t]]],spatialReference:r})}class se extends St{constructor(e,t,s){super(e,t,null),this._transform=s}static from(e,t,s){const i=Ut.createInstance(),r=[],o=e.filter(a=>!!a.geometry);for(const a of o){const l=fe(a.geometry);$t(r,[a],l,!1,!1,t)}return new se(i,r,s)}get geometryType(){const e=this._current;return e?e.geometryType:null}get insertAfter(){return this._current.insertAfter}readGraphic(){return this._current}getCursor(){return this.copy()}copy(){const e=new se(this.instance,this._features,this._transform);return this.copyInto(e),e}}const G=new Ue,ae=new Ue,Me="esriGeometryPolyline";function Se(n){n.coords.length=0,n.lengths.length=0}let R=class{constructor(){this.bounds=b(),this.graphic=null}static acquire(e=null,t,s,i,r){let o;return R._pool.length===0?o=new R:(o=R._pool.pop(),this._set.delete(o)),o.acquire(e,t,s,i,r),o}static release(e){e&&!this._set.has(e)&&(e.release(),this._pool.push(e),this._set.add(e))}static getCentroidQuantized(e,t){if(he(e.geometry)){const s=e.symbol;if($(s))return null;if((s==null?void 0:s.layers.length)>0&&s.layers.some(i=>i.type==="text"||i.type==="marker")){const i=it(e.geometry);return i!==null?Vt(t,{},{x:i[0],y:i[1]},!1,!1):null}}return null}acquire(e=null,t,s,i,r){e&&this.set(e,t,s,i,r)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(e,t,s,i,r){this.graphic=e,this.geometry=s,this.symbolResource=t,this.bounds=i,r&&(this.size=r)}getGeometryQuantized(e,t,s,i){const r=this.geometry,o=fe(r);if($(o))return null;switch(o){case"esriGeometryPolygon":{const a=r,{rings:l}=a;if(!l||l.length===0)return null;let d;if(d=l.length===1&&l[0].length===2?z(e,{paths:[[l[0][0],l[0][1]]]}):z(e,this.geometry),!d){const h={x:l[0][0][0],y:l[0][0][1]};if(d=z(e,h),d){const{x:c,y:u}=d;return{rings:[[[c-1,u],[1,-1],[1,1],[-1,1],[-1,-1]]]}}}return d}case"esriGeometryPolyline":{const a=r;return Se(G),Se(ae),At(G,a),zt(ae,G,a.hasZ,a.hasM,Me,e.scale[0]),Gt(G,ae,a.hasZ,a.hasM,Me,e),Ot(G,a.hasZ,a.hasM)}case"esriGeometryMultipoint":{const a=r,l=.5*i*Math.max(Math.abs(this.size[0])+this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]),d=j(s);let h=a.points;if(d){const[c,u]=d.valid,p=u-c;h=h.filter(f=>{if(f[0]+l>u||f[0]-l<c){const m=[...f];return f[0]+l>u?m[0]-=p:m[0]+=p,re(t,f,l)||re(t,m,l)}return re(t,f,l)})}return h.length===0?{points:h}:z(e,{points:h})}}return z(e,this.geometry)}};R._pool=[],R._set=new Set;const O={minX:0,minY:0,maxX:0,maxY:0},L=b(),Ie=1e-5;function Q(n,e,t,s,i){return O.minX=e,O.minY=t,O.maxX=s,O.maxY=i,n.search(O)}function fs(n){return{minX:n.bounds[0],minY:n.bounds[1],maxX:n.bounds[2],maxY:n.bounds[3]}}class ps{constructor(e,t,s,i,r,o,a){this._graphics=i,this._onAdd=r,this._onRemove=o,this._hashToCIM=a,this._index=Pt(9,fs),this._itemByGraphic=new Map,this._inflatedSizeHelper=new ge,this._tileInfoView=e,this._uidFieldName=s;const l=e.getClosestInfoForScale(t);l&&(this._resolution=this._tileInfoView.getTileResolution(l.level))}setResourceManager(e){this._cimResourceManager=e,this._hittestDrawHelper=new Ke(e)}hitTest(e,t,s,i,r){e=Oe(e,this._tileInfoView.spatialReference);const o=.5*i*window.devicePixelRatio*s;L[0]=e-o,L[1]=t-o,L[2]=e+o,L[3]=t+o;const a=.5*i*(s+w),l=Q(this._index,e-a,t-a,e+a,t+a);if(!l||l.length===0)return[];const d=[],h=b(),c=b();for(const f of l){const{geometry:m,symbolResource:_}=f;this._getSymbolBounds(h,_,m,c,r),c[3]=c[2]=c[1]=c[0]=0,Xe(h,L)&&f.graphic.visible&&d.push(f)}if(d.length===0)return[];const u=this._hittestDrawHelper,p=[];for(const f of d){const{geometry:m,symbolResource:_}=f,{hash:y,textInfo:M}=_,q=this._hashToCIM.get(y);q&&u.hitTest(L,q.symbol,m,M,r,i)&&p.push(f)}return p.sort(ms),p.map(f=>f.graphic)}getGraphicsData(e,t,s){const i=this._searchForItems(t);if(i.length===0||s.length===0)return[];i.sort((c,u)=>c.zorder-u.zorder),i[0].insertAfter=-1;for(let c=1;c<i.length;c++)i[c].insertAfter=i[c-1].graphic.uid;i.sort((c,u)=>c.graphic.uid-u.graphic.uid),s.sort((c,u)=>c.uid-u.uid);let r,o=0,a=0;const l=t.resolution,d=[],h={originPosition:"upperLeft",scale:[l,l],translate:[t.bounds[0],t.bounds[3]]};for(const c of s){for(a=-2;o<i.length;)if(r=i[o],o++,c.uid===r.graphic.uid){a=r.insertAfter;break}if(!r.geometry||a===-2)continue;const u=r.getGeometryQuantized(h,t.bounds,this._tileInfoView.spatialReference,l),p={...r.graphic.attributes};p[this._uidFieldName]=c.uid,r.groupId==null&&(r.groupId=e.createTemplateGroup(r.symbol,null)),d.push({centroid:R.getCentroidQuantized(r,h),geometry:u,attributes:p,symbol:r.symbol,groupId:r.groupId,insertAfter:a,zorder:r.zorder})}return d.sort((c,u)=>c.zorder-u.zorder),d}queryTileData(e,t){if(this._graphics.length===0)return[];const{bounds:s,resolution:i}=t,r=this._searchForItems(t),o=[];return r.length===0||this._createTileGraphics(o,e,r,{originPosition:"upperLeft",scale:[i,i],translate:[s[0],s[3]]},t),o}has(e){return this._itemByGraphic.has(e)}getBounds(e){const t=this._itemByGraphic.get(e);return t?t.bounds:null}getAllBounds(){return Array.from(this._itemByGraphic.values()).filter(e=>e.graphic.visible).map(e=>e.bounds)}addOrModify(e,t,s){if(!e||$(t))return;this.has(e)&&this.remove(e),this._onAdd(e);const i=[0,0,0,0],r=this._getSymbolBounds(null,t,s,i,0),o=R.acquire(e,t,s,T(r)?r:null,i);return this._itemByGraphic.set(e,o),s&&this._index.insert(o),o.bounds}remove(e){if(!this._itemByGraphic.has(e))return;this._onRemove(e);const t=this._itemByGraphic.get(e);t.bounds&&this._index.remove(t),this._itemByGraphic.delete(e)}updateZ(){const e=this._graphics.items;let t,s;for(let i=0;i<e.length;i++)s=e[i],t=this._itemByGraphic.get(s),t&&(t.zorder=i)}update(e,t,s){const i=this._itemByGraphic.get(e);i.groupId=null;const r=Je(i.bounds);this._index.remove(i);const o=this._getSymbolBounds(i.bounds,t,s,i.size,0);return T(o)&&i.set(e,t,s,o,i.size),s&&this._index.insert(i),{oldBounds:r,newBounds:i.bounds}}updateLevel(e){if(this._resolution===e)return;this._resolution=e,this._index.clear();const t=this._itemByGraphic,s=[];for(const[i,r]of t){const o=this._getSymbolBounds(r.bounds,r.symbolResource,r.geometry,r.size,0);r.geometry&&T(o)&&(r.bounds=o,s.push(r))}this._index.load(s)}clear(){this._itemByGraphic.clear(),this._index.clear()}_createTileGraphics(e,t,s,i,r){const o=this._uidFieldName,a=this._tileInfoView.spatialReference,{bounds:l,resolution:d}=r;let h,c,u,p;s.sort((f,m)=>f.zorder-m.zorder);for(let f=0;f<s.length;f++){u=s[f],h=u.graphic,c=u.getGeometryQuantized(i,l,a,d),p=f===0?-1:s[f-1].graphic.uid;const m={...u.graphic.attributes};m[o]=h.uid,u.groupId==null&&(u.groupId=t.createTemplateGroup(u.symbol,null)),e.push({centroid:R.getCentroidQuantized(u,i),geometry:c,attributes:m,symbol:u.symbol,groupId:u.groupId,insertAfter:p,zorder:u.zorder})}}_searchForItems(e){const t=this._tileInfoView.spatialReference,s=e.bounds;if(t.isWrappable){const[i,r]=j(t).valid,o=Math.abs(s[2]-r)<Ie,a=Math.abs(s[0]-i)<Ie;if((!o||!a)&&(o||a)){const l=e.resolution;let d;d=b(o?[i,s[1],i+l*w,s[3]]:[r-l*w,s[1],r,s[3]]);const h=Q(this._index,s[0],s[1],s[2],s[3]),c=Q(this._index,d[0],d[1],d[2],d[3]);return[...new Set([...h,...c])]}}return Q(this._index,s[0],s[1],s[2],s[3])}_getSymbolBounds(e,t,s,i,r){if(!t||!t.symbol||!s)return null;if(e||(e=b()),rt(e,s),!i||i[0]===0&&i[1]===0&&i[2]===0&&i[3]===0){const{hash:l,textInfo:d}=t,h=this._hashToCIM.get(l);if(!h)return null;i||(i=[0,0,0,0]);const c=this._inflatedSizeHelper.getSymbolInflateSize(i,h.symbol,this._cimResourceManager,r,d);i[0]=N(c[0]),i[1]=N(c[1]),i[2]=N(c[2]),i[3]=N(c[3])}const o=this._resolution,a=ge.safeSize(i);return e[0]-=a*o,e[1]-=a*o,e[2]+=a*o,e[3]+=a*o,e}}const ms=(n,e)=>{const t=Re(n.graphic),s=Re(e.graphic);return t===s?e.zorder-n.zorder:t-s},gs=n=>{let e=class extends jt(n){constructor(){super(...arguments),this.graphics=null,this.renderer=null}};return v([D()],e.prototype,"graphics",void 0),v([D()],e.prototype,"renderer",void 0),v([D()],e.prototype,"updating",void 0),v([D()],e.prototype,"view",void 0),e=v([$e("esri.views.layers.GraphicsView")],e),e},ys=Ze("esri-2d-graphic-debug");function le(n,e,t){if(t.has(n))return t.get(n);const s={tile:e,addedOrModified:[],removed:[]};return t.set(n,s),s}let C=class extends gs(Ne(Ee)){constructor(n){super(n),this._storage=new It,this._displayIds=new Map,this._controller=new AbortController,this._tiles=new Map,this._graphicStoreUpdate=!1,this._graphicsSet=new Set,this._matcher=Promise.resolve(null),this._tileUpdateSet=new Set,this._tilesToUpdate=new Map,this._graphicIdToAbortController=new Map,this._attached=!1,this._updatingGraphicsTimer=null,this._hashToExpandedSymbol=new Map,this._hashToExpandedSymbolPromise=new Map,this._hashToCIMSymbolPromise=new Map,this._hashToCIM=new Map,this._processing=!1,this._needsProcessing=!1,this._pendingUpdate={added:new Set,updated:new Set,removed:new Set},this.lastUpdateId=-1,this.updateRequested=!1,this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}destroy(){this._updatingGraphicsTimer&&(clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=null,this.notifyChange("updating")),this._controller.abort(),this.container.destroy(),this._set("graphics",null),this._graphicStore.clear(),this._attributeStore=null,this._hashToExpandedSymbol.clear(),this.view=null,this.renderer=null,this._hashToCIM.clear(),this._hashToCIMSymbolPromise.clear(),this._hashToExpandedSymbolPromise.clear()}_createMatcher(n,e,t){if(n){const s=De(n),i=Mt({indexCount:0,fields:{}},"feature",n,s);this._matcher=Bt(i,e,null,t)}}_createDisplayId(n){return this._displayIds.has(n)||this._displayIds.set(n,this._storage.createDisplayId()),this._displayIds.get(n)}initialize(){this._attributeStore=new Lt({type:"local",initialize:i=>Promise.resolve(this.container.attributeView.initialize(i)),update:i=>this.container.attributeView.requestUpdate(i),render:()=>this.container.requestRender()},Et("2d"),()=>this.notifyChange("updating")),this.container.hasHighlight=()=>this._attributeStore.hasHighlight;const n=i=>{this._createDisplayId(i.uid),this._setFilterState(i.uid,i.visible)},e=i=>{const r=this._displayIds.get(i.uid);this._displayIds.delete(i.uid),this._storage.releaseDisplayId(r)},t=new wt(this.container.getMaterialItems.bind(this.container),this.view.featuresTilingScheme.tileInfo);this._graphicStore=new ps(this.view.featuresTilingScheme,this.view.state.scale,this.uid,this.graphics,n,e,this._hashToCIM),this._meshFactory=new Tt(null,this.uid,t),this._templateStore=t,this.handles.add([Qe(()=>this.renderer,i=>{this._createMatcher(i,t,this.container.stage.resourceManager);for(const r of this.graphics)this._pendingUpdate.updated.add(r);this.requestUpdate()}),this.view.graphicsTileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",()=>{ys&&this.container.enableRenderingBounds(()=>this._graphicStore.getAllBounds()),this.graphics.items.length>0&&this._graphicsChangeHandler({target:this.graphics,added:this.graphics.items,removed:[],moved:[]}),this.handles.add(this.graphics.on("change",r=>this._graphicsChangeHandler(r)),"graphics");const i=this.container.stage.resourceManager;this._createMatcher(this.renderer,t,i),this._graphicStore.setResourceManager(i),this._attached=!0,this.notifyChange("updating")})]);const s=this.view.graphicsTileStore.tiles;this._onTileUpdate({added:s,removed:[]})}get updating(){return!this._attached||this._updatingGraphicsTimer!==null||this._tileUpdateSet.size>0||this._tilesToUpdate.size>0||this._attributeStore.isUpdating()}hitTest(n){if(!this.view||!this.view.position)return[];const{resolution:e,rotation:t}=this.view.state;return this._graphicStore.hitTest(n.x,n.y,2,e,t)}update(n){x(this._controller.signal);const e=n.state,{resolution:t}=e;if(this._graphicStore.updateLevel(t),this._graphicStoreUpdate=!0,this.updateRequested=!1,this._pendingUpdate.updated.size>0){if(!this._processing)return void this._updateGraphics();this._needsProcessing=!0}}viewChange(){this.requestUpdate()}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback())}processUpdate(n){this.updateRequested&&(this.updateRequested=!1,this.update(n))}graphicUpdateHandler(n){const{graphic:e,property:t}=n;switch(t){case"attributes":case"geometry":case"symbol":this._pendingUpdate.updated.add(e),this.requestUpdate();break;case"visible":this._setFilterState(e.uid,e.visible),this._attributeStore.sendUpdates()}}setHighlight(n){const e=n.map(t=>this._displayIds.get(t));this._attributeStore.setHighlight(n,e)}_getIntersectingTiles(n){const e=this._graphicStore.getBounds(n);if(!e||et(e)===0||tt(e)===0)return[];const t=hs(e,this.view.spatialReference);return T(t)?[...new Set([...this.view.graphicsTileStore.boundsIntersections(t[0]),...this.view.graphicsTileStore.boundsIntersections(t[1])])]:this.view.graphicsTileStore.boundsIntersections(e)}async _updateTile(n){x(this._controller.signal);const e=n.tile,t=this._getGraphicsData(this._templateStore,e,n.addedOrModified),s=await this._processGraphics(e,t);return x(this._controller.signal),this._patchTile(e.key,{type:"update",addOrUpdate:s,remove:n.removed,end:!0,clear:!1,sort:!1}),s}_patchTile(n,e){if(!this._tiles.has(n))return;const t=this._tiles.get(n);this.container.onTileData(t,e),this.container.requestRender()}_graphicsChangeHandler(n){const e=this._pendingUpdate;for(const t of n.added)e.added.add(t);for(const t of n.moved)e.updated.add(t);for(const t of n.removed)this._pendingUpdate.added.has(t)?e.added.delete(t):e.removed.add(t);this._processing?this._needsProcessing=!0:this._updateGraphics()}_getGraphicsToUpdate(){const n={added:[],removed:[],updated:[]};if(!this.graphics)return n;const e=this._pendingUpdate;for(const t of this.graphics.items)e.added.has(t)?n.added.push(t):e.updated.has(t)&&n.updated.push(t);for(const t of e.removed)this._graphicStore.has(t)&&n.removed.push(t);return e.added.clear(),e.removed.clear(),e.updated.clear(),n}async _updateGraphics(){this._processing=!0;const{added:n,removed:e,updated:t}=this._getGraphicsToUpdate(),s=this._tilesToUpdate;let i;try{if(!this._graphicStoreUpdate){const h=this.view.state,{resolution:c}=h;this._graphicStore.updateLevel(c)}const r=[],o=new Array(n.length+e.length);for(let h=0;h<t.length;h++){const c=t[h],u=this._getIntersectingTiles(c);for(const p of u)i=p.id,le(i,p,s).removed.push(this._displayIds.get(c.uid));r.push(this._updateGraphic(c,null)),o[h]=c}const a=t.length;for(let h=0;h<n.length;h++){const c=n[h];o[a+h]=c,this._graphicsSet.add(c),r.push(this._addGraphic(c))}for(const h of e){this._abortProcessingGraphic(h.uid);const c=this._getIntersectingTiles(h);for(const u of c)i=u.id,le(i,u,s).removed.push(this._displayIds.get(h.uid));this._graphicsSet.delete(h),this._graphicStore.remove(h)}let l;this._flipUpdatingGraphics(),await Promise.all(r);for(let h=0;h<o.length;h++){l=o[h];const c=this._getIntersectingTiles(l);for(const u of c)i=u.id,le(i,u,s).addedOrModified.push(l)}this._graphicStore.updateZ();const d=[];for(const[h,c]of s)d.push(this._updateTile(c));await Promise.all(d)}catch(r){H(r)}for(const r of e)try{const o=await this._getSymbolForGraphic(r,null);if(o){const a=o.hash();this._hashToExpandedSymbol.delete(a)}}catch(o){H(o)}s.clear(),this.notifyChange("updating"),this._processing=!1,this._needsProcessing&&(this._needsProcessing=!1,this._updateGraphics())}_getArcadeInfo(n){const e=(n.attributes?Object.keys(n.attributes):[]).map(t=>({name:t,alias:t,type:typeof n.attributes[t]=="string"?"esriFieldTypeString":"esriFieldTypeDouble"}));return $(n.geometry)?null:{geometryType:fe(n.geometry),spatialReference:We.fromJSON(n.geometry.spatialReference),fields:e}}_getSymbolForGraphic(n,e){return x(this._controller.signal),T(n.symbol)?Promise.resolve(n.symbol):T(this.renderer)?this.renderer.getSymbolAsync(n,{scale:this.view.scale,signal:T(e)?e.signal:null}):Promise.resolve(this._getNullSymbol(n))}_getCIMSymbol(n,e,t){let s=this._hashToCIM.get(e);if(s)return Promise.resolve(s);const i=qe(n);if(T(i)){if(i.type==="CIMSymbolReference")return s=i,this._hashToCIM.set(e,s),Promise.resolve(s);let r=this._hashToCIMSymbolPromise.get(e);return r||(r=i.fetchCIMSymbol(t).then(o=>(this._hashToCIM.set(e,o.data),this._hashToCIMSymbolPromise.delete(e),o)).catch(o=>(this._hashToCIMSymbolPromise.delete(e),ye(o),null)),this._hashToCIMSymbolPromise.set(e,r),r)}return Promise.resolve(null)}_expandCIMSymbol(n,e,t,s){const i=this._hashToExpandedSymbol.get(t);if(i)return Promise.resolve(i);let r=this._hashToExpandedSymbolPromise.get(t);if(r)return r;const o=this.container.stage,a=this._getArcadeInfo(e),l=De(null),d=Kt(n,l);return r=Ft(d,a,o.resourceManager,s),this._hashToExpandedSymbolPromise.set(t,r),r.then(h=>(this._hashToExpandedSymbol.set(t,h),this._hashToExpandedSymbolPromise.delete(t),h)),r}async _getSymbolResources(n,e){return x(this._controller.signal),this.container.stage?this._getSymbolForGraphic(n,e).then(t=>{const s=t.hash();return this._getCIMSymbol(t,s,e).then(i=>$(i)?null:this._expandCIMSymbol(i,n,s,e).then(r=>{const o=r.layers.filter(a=>a.type==="text"&&typeof a.text=="string");if(o&&o.length>0){const a=new Array(o.length);for(let d=0;d<o.length;d++){const h=o[d],c=[],[u]=He(h.text);h.text=u;for(let p=0;p<u.length;p++)c.push(u.charCodeAt(p));a[d]={symbol:h,id:d,glyphIds:c}}const l=new Map;return this.container.getMaterialItems(a).then(d=>{for(let h=0;h<o.length;h++){const c=o[h];l.set(c.cim,{text:c.text,mosaicItem:d[h].mosaicItem})}return{symbol:r,textInfo:l,hash:s}})}return{symbol:r,hash:s}}))}).catch(t=>(ye(t),null)):null}async _projectAndNormalizeGeometry(n,e){if(x(this._controller.signal),$(n.geometry)||n.geometry.type==="mesh")return null;let t=n.geometry;if(he(t)){const r=t.rings;t.rings=r}else if(_e(t)){const r=t.paths;t.paths=r}else if(xe(t)){const r=await this._getSymbolForGraphic(n,e);x(this._controller.signal),cs(r.type)||ds(r.type)?t=t.center:t=us(t)}await at(t.spatialReference,this.view.spatialReference);const s=nt(t),i=lt(s,t.spatialReference,this.view.spatialReference);return i&&ot(i),i}_onTileUpdate(n){const e=j(this.view.spatialReference);if(n.added&&n.added.length>0)for(const t of n.added)this._addNewTile(t,e);if(n.removed&&n.removed.length>0)for(const t of n.removed)this._removeTile(t.key)}async _addGraphic(n){this._abortProcessingGraphic(n.uid),x(this._controller.signal);const e=new AbortController;this._graphicIdToAbortController.set(n.uid,e);const t={signal:e.signal};try{await this._addOrUpdateGraphic(n,t),x(this._controller.signal),this._graphicIdToAbortController.delete(n.uid)}catch(s){if(this._graphicIdToAbortController.delete(n.uid),!H(s))throw s}}_updateGraphic(n,e){x(this._controller.signal);const t=this._projectAndNormalizeGeometry(n,e),s=this._getSymbolResources(n,e);return Promise.all([t,s]).then(([i,r])=>{x(this._controller.signal),this._graphicStore.addOrModify(n,r,i)})}_addOrUpdateGraphic(n,e){x(this._controller.signal);const t=this._projectAndNormalizeGeometry(n,e),s=this._getSymbolResources(n,e);return Promise.all([t,s]).then(([i,r])=>{x(this._controller.signal),this._graphicsSet.has(n)&&this._graphicStore.addOrModify(n,r,i)})}_addTile(n){const e=this.view.featuresTilingScheme.getTileBounds(b(),n),t=this.view.featuresTilingScheme.getTileResolution(n.level),s=new ts(n,t,e[0],e[3]);return this._tiles.set(n,s),this.container.addChild(s),s}async _addNewTile(n,e){const t=this._addTile(n.key),s=this._graphicStore.queryTileData(this._templateStore,n);if(s.length===0)return;if(e){const r=Math.round((e.valid[1]-e.valid[0])/n.resolution);for(const o of s)o.geometry&&(ve(o.geometry)||oe(o.geometry))&&this._wrapPoints(o,r)}const i=n.key;this._tileUpdateSet.add(n.key),this.notifyChange("updating");try{const r={type:"update",clear:!1,addOrUpdate:await this._processGraphics(n,s),remove:[],end:!0,sort:!1};t.patch(r),this._tileUpdateSet.delete(i),this.notifyChange("updating")}catch(r){if(this._tileUpdateSet.delete(i),this.notifyChange("updating"),!H(r))throw r}}_removeTile(n){if(!this._tiles.has(n))return;const e=this._tiles.get(n);this.container.removeChild(e),e.destroy(),this._tiles.delete(n)}_setFilterState(n,e){const t=this._displayIds.get(n),s=this._attributeStore.getHighlightFlag(n);this._attributeStore.setData(t,0,0,s|(e?ut:0))}_getGraphicsData(n,e,t){const s=this.view,i=j(s.spatialReference),r=this._graphicStore.getGraphicsData(n,e,t);if(i){const o=Math.round((i.valid[1]-i.valid[0])/e.resolution);for(const a of r)a.geometry&&(ve(a.geometry)||oe(a.geometry))&&this._wrapPoints(a,o)}return r}_wrapPoints(n,e){const t=n.geometry;oe(t)?this._wrapMultipoint(t,e):this._wrapPoint(n,e)}_wrapMultipoint(n,e){const t=n.points,s=[];let i=0,r=0;for(const[o,a]of t){if(s.push([o+i,a]),i=0,e===I){const l=5*w;o+r<l?(s.push([e,0]),i=-e):o+r>I-l&&(s.push([-e,0]),i=e)}else o+r<-w?(s.push([e,0]),i=-e):o+r>I+w&&(s.push([-e,0]),i=e);r+=o}n.points=s}_wrapPoint(n,e){const t=n.geometry;if(e===I){const s=5*w;t.x<s?n.geometry={points:[[t.x,t.y],[e,0]]}:t.x>I-s&&(n.geometry={points:[[t.x,t.y],[-e,0]]})}else t.x<-w?n.geometry={points:[[t.x,t.y],[e,0]]}:t.x>I+w&&(n.geometry={points:[[t.x,t.y],[-e,0]]})}_processGraphics(n,e,t){if(!(e&&e.length)||!this._meshFactory)return null;const s=se.from(e,this.uid,n.transform),i=this._meshFactory;return this._matcher.then(r=>i.analyzeGraphics(s,this.container.stage.resourceManager,r,null,null,t).then(()=>(this._attributeStore.sendUpdates(),this._processAnalyzedGraphics(n,s))))}_processAnalyzedGraphics(n,e){const t=this._meshFactory,s=e.getSize(),i=e.getCursor(),r={features:s,records:s,metrics:0},o=new Rt(n.key.id,r,Ae.DEFAULT,!1,!1),a=[];for(;i.next();){const c=i.readGraphic();c.insertAfter=c.insertAfter===-1?-1:this._displayIds.get(c.insertAfter),c.displayId=this._displayIds.get(c.attributes[this.uid]);const u=new V(c.displayId);u.insertAfter=c.insertAfter,a.push(u),t.writeGraphic(o,i,n.level,this.container.stage.resourceManager)}const l=n.tileInfoView.tileInfo.isWrappable,d=o.serialize(l);if(d.length!==1)return new B;const h=d[0].message;return B.fromVertexData(h,a)}_abortProcessingGraphic(n){this._graphicIdToAbortController.has(n)&&this._graphicIdToAbortController.get(n).abort()}_getNullSymbol(n){const e=n.geometry;return _e(e)?ht:he(e)||xe(e)?dt:ct}_flipUpdatingGraphics(){this._updatingGraphicsTimer&&clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=setTimeout(()=>{this._updatingGraphicsTimer=null,this.notifyChange("updating")},160),this.notifyChange("updating")}};v([D({constructOnly:!0})],C.prototype,"requestUpdateCallback",void 0),v([D()],C.prototype,"container",void 0),v([D({constructOnly:!0})],C.prototype,"graphics",void 0),v([D()],C.prototype,"updating",null),v([D()],C.prototype,"view",void 0),v([D()],C.prototype,"updateRequested",void 0),C=v([$e("esri.views.2d.layers.support.GraphicsView2D")],C);const Ri=C,_s=Math.PI/180,xs=4;class vs extends Wt{constructor(e){super(),this._dvsMat3=Ce(),this._localOrigin={x:0,y:0},this._getBounds=e}destroy(){this._vao&&(this._vao.dispose(!0),this._vao=null,this._vertexBuffer=null,this._indexBuffer=null),this._program&&(this._program.dispose(),this._program=null)}doRender(e){const{context:t}=e,s=this._getBounds();if(s.length<1)return;this._createShaderProgram(t),this._updateMatricesAndLocalOrigin(e),this._updateBufferData(t,s),t.setBlendingEnabled(!0),t.setDepthTestEnabled(!1),t.setStencilWriteMask(0),t.setStencilTestEnabled(!1),t.setBlendFunction(be.ONE,be.ONE_MINUS_SRC_ALPHA),t.setColorMask(!0,!0,!0,!0);const i=this._program;t.bindVAO(this._vao),t.useProgram(i),i.setUniformMatrix3fv("u_dvsMat3",this._dvsMat3),t.gl.lineWidth(1),t.drawElements(_t.LINES,8*s.length,Ge.UNSIGNED_INT,0),t.bindVAO()}_createTransforms(){return{dvs:Ce()}}_createShaderProgram(e){if(this._program)return;const t=`precision highp float;
        uniform mat3 u_dvsMat3;

        attribute vec2 a_position;

        void main() {
          mediump vec3 pos = u_dvsMat3 * vec3(a_position, 1.0);
          gl_Position = vec4(pos.xy, 0.0, 1.0);
        }`,s=`precision mediump float;
      void main() {
        gl_FragColor = vec4(0.75, 0.0, 0.0, 0.75);
      }`;this._program=e.programCache.acquire(t,s,Le().attributes)}_updateMatricesAndLocalOrigin(e){const{state:t}=e,{displayMat3:s,size:i,resolution:r,pixelRatio:o,rotation:a,viewpoint:l}=t,d=_s*a,{x:h,y:c}=l.targetGeometry,u=Oe(h,t.spatialReference);this._localOrigin.x=u,this._localOrigin.y=c;const p=o*i[0],f=o*i[1],m=r*p,_=r*f,y=qt(this._dvsMat3);Ht(y,y,s),Nt(y,y,kt(p/2,f/2)),Zt(y,y,Qt(i[0]/m,-f/_,1)),Yt(y,y,-d)}_updateBufferData(e,t){const{x:s,y:i}=this._localOrigin,r=2*xs*t.length,o=new Float32Array(r),a=new Uint32Array(8*t.length);let l=0,d=0;for(const h of t)h&&(o[2*l+0]=h[0]-s,o[2*l+1]=h[1]-i,o[2*l+2]=h[0]-s,o[2*l+3]=h[3]-i,o[2*l+4]=h[2]-s,o[2*l+5]=h[3]-i,o[2*l+6]=h[2]-s,o[2*l+7]=h[1]-i,a[d+0]=l+0,a[d+1]=l+3,a[d+2]=l+3,a[d+3]=l+2,a[d+4]=l+2,a[d+5]=l+1,a[d+6]=l+1,a[d+7]=l+0,l+=4,d+=8);if(this._vertexBuffer?this._vertexBuffer.setData(o.buffer):this._vertexBuffer=te.createVertex(e,ce.DYNAMIC_DRAW,o.buffer),this._indexBuffer?this._indexBuffer.setData(a):this._indexBuffer=te.createIndex(e,ce.DYNAMIC_DRAW,a),!this._vao){const h=Le();this._vao=new ze(e,h.attributes,h.bufferLayouts,{geometry:this._vertexBuffer},this._indexBuffer)}}}const Le=()=>yt("bounds",{geometry:[{location:0,name:"a_position",count:2,type:Ge.FLOAT}]});class Mi extends Dt{constructor(e){super(e),this.hasHighlight=()=>!0}destroy(){super.destroy(),this._boundsRenderer&&(this._boundsRenderer.destroy(),this._boundsRenderer=null)}enableRenderingBounds(e){this._boundsRenderer=new vs(e),this.requestRender()}get hasLabels(){return!1}onTileData(e,t){e.patch(t),this.contains(e)||this.addChild(e),this.requestRender()}onTileError(e){e.clear(),this.contains(e)||this.addChild(e)}_renderChildren(e,t){for(const s of this.children)s.isReady&&s.hasData&&(s.commit(e),e.context.setStencilFunction(xt.EQUAL,s.stencilRef,255),s._displayList.replay(e,s,t))}}export{Ri as o,Mi as t};
