import{j as l}from"./asyncUtils-087555fc.js";import{a as n,s as g}from"./Error-57322e92.js";import{r as _,e as f}from"./typedArrayUtil-d9bc5fbd.js";import{f as m,j as d}from"./promiseUtils-32d9c228.js";import{E as w,x as p}from"./Extent-a1a1de42.js";import{n as E,r as q}from"./featureConversionUtils-d2229ed4.js";import{u as F}from"./FeatureStore-5d216b73.js";import{g as S,f as x}from"./utils-44a68fd6.js";import{Y as T}from"./QueryEngine-209cef0c.js";import{T as j,I}from"./geojson-8ad628de.js";import{m as b}from"./sourceUtils-36247682.js";import{K as C}from"./wfsUtils-8d9959af.js";import{r as P}from"./FieldsIndex-02142c8a.js";import"./cast-a534ae90.js";import"./string-480f3e3f.js";import"./ensureType-25b8cc06.js";import"./nextTick-3ee5a785.js";import"./jsonUtils-c6684c52.js";import"./Polyline-b571c705.js";import"./OptimizedFeature-73582c6e.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./Evented-cbf5f368.js";import"./aaBoundingBox-4a83dbbc.js";import"./aaBoundingRect-b340cf8c.js";import"./mathUtils-57aba1ea.js";import"./vec3-1863987c.js";import"./vec3f64-6cd30318.js";import"./common-c186b691.js";import"./vec4-46a9b36d.js";import"./PooledRBush-0bffad50.js";import"./quickselect-322ec8e1.js";import"./optimizedFeatureQueryEngineAdapter-be75ae94.js";import"./centroid-56c5816c.js";import"./preload-helper-41c905a7.js";import"./jsonMap-190c5593.js";import"./unitUtils-dd6fb8ee.js";import"./projection-acd73147.js";import"./SimpleObservable-8e532943.js";import"./mat4-7dde83b1.js";import"./assets-cd44347b.js";import"./request-24011425.js";import"./zscale-48bab05e.js";import"./normalizeUtils-0f537694.js";import"./geometry-eec1b371.js";import"./typeUtils-cd52dc20.js";import"./json-48e3ea08.js";import"./MemCache-1d2f56ee.js";import"./QueryEngineResult-92e13fe4.js";import"./utils-52ad3c09.js";import"./generateRendererUtils-2f0b667c.js";import"./colorRamps-8d7efc14.js";import"./Color-af6e0c66.js";import"./colorUtils-639f4d25.js";import"./enumeration-61a13175.js";import"./Symbol-8266348e.js";import"./ItemCache-bf1028d4.js";import"./WhereClause-6c9440a1.js";import"./fieldUtils-b2df74c4.js";import"./arcadeOnDemand-a976a73c.js";import"./QueryEngineCapabilities-42e44ded.js";import"./timeSupport-de4019f0.js";import"./Scheduler-5e6ccc87.js";import"./reactiveUtils-5869e41a.js";import"./xmlUtils-444cb4c0.js";import"./Field-1d4f9ca4.js";import"./fieldType-b34e5d2d.js";class Nt{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async t=>{const{objectIdField:e}=this._queryEngine,i=await C(this._getFeatureUrl??"",this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(r=>r.name),signal:t});await j(i),m(t);const o=I(i,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:e});if(!w(this._queryEngine.spatialReference,p))for(const r of o)_(r.geometry)&&(r.geometry=E(S(q(r.geometry,this._queryEngine.geometryType,!1,!1),p,this._queryEngine.spatialReference)));let a=1;for(const r of o){const s={};b(this._fieldsIndex,s,r.attributes,!0),r.attributes=s,r.attributes[e]==null&&(r.objectId=r.attributes[e]=a++)}return o}}destroy(){var t;(t=this._queryEngine)==null||t.destroy(),this._queryEngine=null}async load(t,e){const{getFeatureUrl:i,getFeatureOutputFormat:o,spatialReference:a,fields:r,geometryType:s,featureType:u,objectIdField:h,customParameters:y}=t;this._featureType=u,this._customParameters=y,this._getFeatureUrl=i,this._getFeatureOutputFormat=o,this._fieldsIndex=new P(r),await this._checkProjection(a),m(e),this._queryEngine=new T({fields:r,geometryType:s,hasM:!1,hasZ:!1,objectIdField:h,spatialReference:a,timeInfo:null,featureStore:new F({geometryType:s,hasM:!1,hasZ:!1})});const c=await this._snapshotFeatures(f(e.signal));return this._queryEngine.featureStore.addMany(c),{extent:this._queryEngine.fullExtent}}async applyEdits(){throw new n("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(t,e.signal)}async queryFeatureCount(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(t,e.signal)}async queryObjectIds(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(t,e.signal)}async queryExtent(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(t,e.signal)}async querySnapping(t,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(t,e.signal)}async refresh(t){var e;return this._customParameters=t,(e=this._snapshotTask)==null||e.abort(),this._snapshotTask=l(this._snapshotFeatures),this._snapshotTask.promise.then(i=>{this._queryEngine.featureStore.clear(),i&&this._queryEngine.featureStore.addMany(i)},i=>{this._queryEngine.featureStore.clear(),d(i)||g.getLogger("esri.layers.WFSLayer").error(new n("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:i}))}),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(t){try{await x(p,t)}catch{throw new n("unsupported-projection","Projection not supported",{spatialReference:t})}}}export{Nt as default};
