import"./geometry-eec1b371.js";import{r as m,e as l}from"./typedArrayUtil-d9bc5fbd.js";import{f as c}from"./projection-acd73147.js";import{g as s,W as p,T as f,D as u,j as S}from"./pixelUtils-cc2ca9c3.js";import{S as d,T as h,p as y}from"./RasterSymbolizer-ea2151a9.js";import{l as x,i as O}from"./utils-eb04a403.js";import{M as N,T as J,$ as b}from"./rasterProjectionHelper-47b61708.js";import{d as g,m as w,f as B}from"./dataUtils-9a2072d5.js";import{a}from"./Extent-a1a1de42.js";import"./ensureType-25b8cc06.js";import"./string-480f3e3f.js";import"./Error-57322e92.js";import"./Polyline-b571c705.js";import"./cast-a534ae90.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-32d9c228.js";import"./typeUtils-cd52dc20.js";import"./jsonMap-190c5593.js";import"./preload-helper-41c905a7.js";import"./mathUtils-57aba1ea.js";import"./vec3-1863987c.js";import"./vec3f64-6cd30318.js";import"./common-c186b691.js";import"./vec4-46a9b36d.js";import"./unitUtils-dd6fb8ee.js";import"./SimpleObservable-8e532943.js";import"./mat4-7dde83b1.js";import"./assets-cd44347b.js";import"./request-24011425.js";import"./aaBoundingRect-b340cf8c.js";import"./zscale-48bab05e.js";import"./colorUtils-82440b70.js";import"./Color-af6e0c66.js";import"./colorUtils-639f4d25.js";import"./enumeration-61a13175.js";import"./colorRamps-8d7efc14.js";class lt{convertVectorFieldData(t){const e=s.fromJSON(t.pixelBlock),o=g(e,t.type);return Promise.resolve(m(o)&&o.toJSON())}async decode(t){const e=await d(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=s.fromJSON(t.pixelBlock),t.extent=t.extent?a.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(m(e)&&e.toJSON())}async updateSymbolizer(t){var e;this.symbolizer=h.fromJSON(t.symbolizerJSON),t.histograms&&((e=this.symbolizer)==null?void 0:e.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=x(t.rasterFunctionJSON)}async process(t){const e=this.rasterFunction.process({extent:a.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(o=>m(o)?s.fromJSON(o):null),primaryRasterIds:t.primaryRasterIds});return m(e)?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(s.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(m(e)&&e.toJSON())}estimateStatisticsHistograms(t){const e=y(s.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=p(s.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel);return e&&e.forEach((o,r)=>{e.set(r,o==null?void 0:o.toJSON())}),Promise.resolve(e)}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map(n=>n?new s(n):null),o=f(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let r,i=o;return t.coefs&&(i=u(o,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(r=S(t.destDimension,t.gcsGrid),i=l(w(i,t.isUV?"vector-uv":"vector-magdir",r))),{pixelBlock:i==null?void 0:i.toJSON(),localNorthDirections:r}}async createFlowMesh(t,e){const o={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:r,indexData:i}=await B(t.meshType,t.simulationSettings,o,e.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:i.buffer},transferList:[r.buffer,i.buffer]}}async getProjectionOffsetGrid(t){const e=a.fromJSON(t.projectedExtent),o=a.fromJSON(t.srcBufferExtent);let r=null;t.datumTransformationSteps&&(r=new c({steps:t.datumTransformationSteps})),(t.includeGCSGrid||N(e.spatialReference,o.spatialReference,r))&&await J();const i=t.rasterTransform?O(t.rasterTransform):null;return b({...t,projectedExtent:e,srcBufferExtent:o,datumTransformation:r,rasterTransform:i})}}export{lt as default};
