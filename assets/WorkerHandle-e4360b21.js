import{C as n,r as a}from"./typedArrayUtil-d9bc5fbd.js";import{c as d}from"./cast-a534ae90.js";import{s as l}from"./Error-57322e92.js";import{f as _}from"./promiseUtils-32d9c228.js";import{u as m}from"./workers-af024c50.js";class L{constructor(e,t,s,r,i={}){this._mainMethod=t,this._transferLists=s,this._listeners=[],this._promise=m(e,{...i,schedule:r}).then(o=>{if(this._thread===void 0){this._thread=o,this._promise=null,i.hasInitialize&&this.broadcast({},"initialize");for(const h of this._listeners)this._connectListener(h)}else o.close()}),this._promise.catch(o=>l.getLogger("esri.core.workers.WorkerHandle").error(`Failed to initialize ${e} worker: ${o}`))}on(e,t){const s={removed:!1,eventName:e,callback:t,threadHandle:null};return this._listeners.push(s),this._connectListener(s),d(()=>{s.removed=!0,n(this._listeners,s),this._thread&&a(s.threadHandle)&&s.threadHandle.remove()})}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null}invoke(e,t){return this.invokeMethod(this._mainMethod,e,t)}invokeMethod(e,t,s){if(this._thread){const r=this._transferLists[e],i=r?r(t):[];return this._thread.invoke(e,t,{transferList:i,signal:s})}return this._promise?this._promise.then(()=>(_(s),this.invokeMethod(e,t,s))):Promise.reject(null)}broadcast(e,t){return this._thread?Promise.all(this._thread.broadcast(t,e)).then(()=>{}):this._promise?this._promise.then(()=>this.broadcast(e,t)):Promise.reject()}get promise(){return this._promise}_connectListener(e){this._thread&&this._thread.on(e.eventName,e.callback).then(t=>{e.removed||(e.threadHandle=t)})}}export{L as h};
