import{e as l,y as c,n as w}from"./cast-a534ae90.js";import{s as g}from"./Error-57322e92.js";import{j as p}from"./promiseUtils-32d9c228.js";import{l as I}from"./reactiveUtils-5869e41a.js";import"./typedArrayUtil-d9bc5fbd.js";import"./ensureType-25b8cc06.js";import{E as f}from"./Extent-a1a1de42.js";import{t as S,n as d}from"./imageUtils-20773273.js";import{y as T}from"./LayerView2D-fc5f87cc.js";import{h as v}from"./TileStore-8f580dbf.js";import{e as y}from"./TileKey-9cae9369.js";import{y as V,r as x}from"./TileStrategy-a5366189.js";import{u as M}from"./LayerView-a849dd77.js";import{i as q}from"./RefreshableLayerView-2de321c7.js";import"./string-480f3e3f.js";import"./nextTick-3ee5a785.js";import"./BitmapTileContainer-1ef594fb.js";import"./aaBoundingRect-b340cf8c.js";import"./mathUtils-57aba1ea.js";import"./vec3-1863987c.js";import"./vec3f64-6cd30318.js";import"./common-c186b691.js";import"./vec4-46a9b36d.js";import"./mat3f32-d3d088e8.js";import"./Bitmap-ff7d2c07.js";import"./mat3-9a8d9db7.js";import"./vec2f32-461e65a9.js";import"./utils-0d179f64.js";import"./EffectView-dffeb0bc.js";import"./parser-01f6451e.js";import"./colorUtils-639f4d25.js";import"./screenUtils-90993e16.js";import"./mat4f32-77b3d8ac.js";import"./mat4-7dde83b1.js";import"./Evented-cbf5f368.js";import"./enums-4ca4641f.js";import"./MaterialKey-a0a08f8b.js";import"./alignmentUtils-ae955d28.js";import"./Utils-a4216b91.js";import"./number-954e4ab6.js";import"./enums-4b2a86a0.js";import"./enums-64ab819c.js";import"./Texture-411ca148.js";import"./context-util-d4c193b5.js";import"./VertexElementDescriptor-2925c6af.js";import"./definitions-2d0dd0cd.js";import"./heatmapUtils-3d7c22c5.js";import"./vec4f64-939de194.js";import"./Color-af6e0c66.js";import"./TileContainer-a618bf74.js";import"./WGLContainer-b2d1fffc.js";import"./pixelUtils-cc2ca9c3.js";import"./vec2f64-30dc1443.js";import"./VertexArrayObject-3630ef4f.js";import"./vec4f32-2f36231b.js";import"./ProgramTemplate-f021fc55.js";import"./StyleDefinition-7d58136b.js";import"./config-1337d16e.js";import"./GeometryUtils-c093d234.js";import"./earcut-58237617.js";import"./vec2-ab9f47bf.js";import"./featureConversionUtils-d2229ed4.js";import"./jsonUtils-c6684c52.js";import"./Polyline-b571c705.js";import"./OptimizedFeature-73582c6e.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./Collection-7c37b74e.js";import"./SimpleObservable-8e532943.js";import"./collectionUtils-0365f48b.js";import"./geometry-eec1b371.js";import"./typeUtils-cd52dc20.js";import"./jsonMap-190c5593.js";import"./Queue-275a6362.js";import"./rbush-8e36784a.js";import"./quickselect-322ec8e1.js";import"./Query-13124a97.js";import"./TimeExtent-2004eecf.js";import"./enumeration-61a13175.js";import"./Field-1d4f9ca4.js";import"./fieldType-b34e5d2d.js";import"./Clonable-9b34e760.js";import"./HandleOwner-2edbba46.js";import"./Identifiable-093f90a8.js";import"./Promise-368b703a.js";const R=[102113,102100,3857,3785,900913],Q=[0,0];let s=class extends q(S(T(M))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this._tileRequests=new Map,this.layer=null}get tileMatrixSet(){const t=this._getTileMatrixSetBySpatialReference(this.layer.activeLayer);return t?(t.id!==this.layer.activeLayer.tileMatrixSetId&&(this.layer.activeLayer.tileMatrixSetId=t.id),t):null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume()}attach(){if(!this.tileMatrixSet)return;const{tileInfo:t}=this.tileMatrixSet;this._tileInfoView=new v(t),this._fetchQueue=new V({tileInfoView:this._tileInfoView,concurrency:16,process:(e,i)=>this.fetchTile(e,i)}),this._tileStrategy=new x({cachePolicy:"keep",resampling:!0,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),this.handles.add(I(()=>{var e,i;return[(i=(e=this.layer)==null?void 0:e.activeLayer)==null?void 0:i.styleId,this.tileMatrixSet]},()=>this._refresh()),this.declaredClass),super.attach()}detach(){var t,e;super.detach(),this.handles.remove(this.declaredClass),(t=this._tileStrategy)==null||t.destroy(),(e=this._fetchQueue)==null||e.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(Q,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(e),this._bitmapView.addChild(e),this.requestUpdate(),e}async doRefresh(){!this.attached||this.updateRequested||this.suspended||this._refresh()}isUpdating(){var t;return((t=this._fetchQueue)==null?void 0:t.updating)??!1}async fetchTile(t,e={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:r,resamplingLevel:h=0}=e;if(!i)return this._fetchImage(t,r);const o=new y(0,0,0,0);let m;try{await i.fetchAvailabilityUpsample(t.level,t.row,t.col,o,{signal:r}),m=await this._fetchImage(o,r)}catch(a){if(p(a))throw a;if(h<3){const n=this._tileInfoView.getTileParentId(t.id);if(n){const u=new y(n),_=await this.fetchTile(u,{...e,resamplingLevel:h+1});return d(this._tileInfoView,_,u,t)}}throw a}return d(this._tileInfoView,m,o,t)}canResume(){const t=super.canResume();return t&&this.tileMatrixSet!==null}supportsSpatialReference(t){return this.layer.activeLayer.tileMatrixSets.some(e=>f(e.tileInfo.spatialReference,t))}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){p(e)||g.getLogger(this.declaredClass).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}_refresh(){this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(t=>{if(!t.bitmap.source)return;const e={id:t.key.id,fulfilled:!1,promise:this._fetchQueue.push(t.key).then(i=>{t.bitmap.source=i}).catch(i=>{p(i)||(t.bitmap.source=null)}).finally(()=>{t.requestRender(),e.fulfilled=!0})};this._tileRequests.set(t,e)})}_getTileMatrixSetBySpatialReference(t){const e=this.view.spatialReference;if(!t.tileMatrixSets)return null;let i=t.tileMatrixSets.find(r=>f(r.tileInfo.spatialReference,e));return!i&&e.isWebMercator&&(i=t.tileMatrixSets.find(r=>R.includes(r.tileInfo.spatialReference.wkid))),i}};l([c()],s.prototype,"_fetchQueue",void 0),l([c({readOnly:!0})],s.prototype,"tileMatrixSet",null),s=l([w("esri.views.2d.layers.WMTSLayerView2D")],s);const ae=s;export{ae as default};
