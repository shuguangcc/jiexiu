import{e as x,y as f,n as O}from"./cast-a534ae90.js";import{U as z,a as F,d as U,g as W}from"./request-f17a8ddb.js";import{j as Y}from"./Collection-7c37b74e.js";import{r as S,t as H}from"./typedArrayUtil-d9bc5fbd.js";import{l as K}from"./reactiveUtils-5869e41a.js";import"./ensureType-25b8cc06.js";import{w as A,a as L,k as j}from"./Extent-a1a1de42.js";import{r as T,t as J}from"./projection-0af97a56.js";import{b as C,g as Q,d as X}from"./kmlUtils-cd65d3ed.js";import{f as Z}from"./normalizeUtils-6483f6b5.js";import{i as I}from"./GraphicsLayer-a7c6f685.js";import{S as tt,T as it,R as et}from"./Bitmap-ff7d2c07.js";import{a as rt}from"./BitmapContainer-b9fd36c2.js";import{y as ot}from"./LayerView2D-fc5f87cc.js";import{i as D}from"./GraphicContainer-cad8d3da.js";import{o as R}from"./BaseGraphicContainer-b5497723.js";import{u as at}from"./LayerView-a849dd77.js";import{C as st,$ as nt}from"./rasterProjectionHelper-e4b94e0c.js";import{a as pt,e as mt}from"./WGLContainer-b2d1fffc.js";import{y as lt,o as ht}from"./RenderingContext-b74012a7.js";import{P as M,G as P,D as $,L as q,Y as ct,V as dt,f as G}from"./enums-64ab819c.js";import{x as gt}from"./VertexArrayObject-3630ef4f.js";import{E as N}from"./Texture-411ca148.js";import"./string-480f3e3f.js";import"./Error-57322e92.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-32d9c228.js";import"./preload-helper-101896b7.js";import"./Evented-cbf5f368.js";import"./SimpleObservable-8e532943.js";import"./mathUtils-57aba1ea.js";import"./vec3-1863987c.js";import"./vec3f64-6cd30318.js";import"./common-c186b691.js";import"./vec4-46a9b36d.js";import"./unitUtils-dd6fb8ee.js";import"./jsonMap-190c5593.js";import"./mat4-7dde83b1.js";import"./Polyline-b571c705.js";import"./assets-a5ce5e1a.js";import"./aaBoundingRect-b340cf8c.js";import"./zscale-48bab05e.js";import"./PopupTemplate-52faab17.js";import"./Clonable-9b34e760.js";import"./fieldUtils-77ec75e2.js";import"./arcadeOnDemand-5175e7d9.js";import"./geometry-eec1b371.js";import"./typeUtils-cd52dc20.js";import"./enumeration-61a13175.js";import"./number-2ab8ca0d.js";import"./locale-30120714.js";import"./Identifiable-093f90a8.js";import"./aaBoundingBox-4a83dbbc.js";import"./jsonUtils-559e9000.js";import"./UniqueValueRenderer-30750d31.js";import"./symbols-75e7a993.js";import"./CIMSymbol-8f02a6e3.js";import"./Symbol-8266348e.js";import"./Color-af6e0c66.js";import"./colorUtils-639f4d25.js";import"./screenUtils-90993e16.js";import"./opacityUtils-1333f803.js";import"./symbolLayerUtils3D-c8c40895.js";import"./persistableUrlUtils-56d43b12.js";import"./collectionUtils-0365f48b.js";import"./Portal-51616380.js";import"./Loadable-46524a7e.js";import"./Promise-368b703a.js";import"./PortalGroup-d495847c.js";import"./PortalUser-e16fc7d1.js";import"./LegendOptions-2e7b3d70.js";import"./diffUtils-8a8cb5bc.js";import"./colorRamps-8d7efc14.js";import"./sizeVariableUtils-d4870b0d.js";import"./Graphic-1859ae71.js";import"./jsonUtils-c6684c52.js";import"./compilerUtils-fefa73ae.js";import"./lengthUtils-92fed992.js";import"./jsonUtils-eb568237.js";import"./styleUtils-015eeecd.js";import"./DictionaryLoader-326d0e17.js";import"./LRUCache-b9228ca3.js";import"./MemCache-1d2f56ee.js";import"./deprecate-0d93948c.js";import"./heatmapUtils-3d7c22c5.js";import"./vec4f64-939de194.js";import"./FeatureSet-9cc47aef.js";import"./Field-1d4f9ca4.js";import"./fieldType-b34e5d2d.js";import"./HandleOwner-2edbba46.js";import"./Layer-ead8c88c.js";import"./BlendLayer-813950f9.js";import"./parser-01f6451e.js";import"./mat4f32-77b3d8ac.js";import"./ScaleRangeLayer-c072e266.js";import"./ElevationInfo-88554f24.js";import"./mat3-9a8d9db7.js";import"./mat3f32-d3d088e8.js";import"./vec2f32-461e65a9.js";import"./utils-0d179f64.js";import"./EffectView-dffeb0bc.js";import"./enums-4ca4641f.js";import"./MaterialKey-a0a08f8b.js";import"./alignmentUtils-ae955d28.js";import"./Utils-a4216b91.js";import"./number-954e4ab6.js";import"./enums-4b2a86a0.js";import"./VertexElementDescriptor-2925c6af.js";import"./definitions-2d0dd0cd.js";import"./context-util-d4c193b5.js";import"./cimAnalyzer-020551ab.js";import"./fontUtils-4ed0e787.js";import"./BidiEngine-836b7ef6.js";import"./utils-0c7f5071.js";import"./mat2d-d0b91e3e.js";import"./vec2-ab9f47bf.js";import"./Rect-ea14f53a.js";import"./callExpressionWithFeature-13fe9b68.js";import"./utils-52ad3c09.js";import"./generateRendererUtils-2f0b667c.js";import"./GeometryUtils-eebff0a0.js";import"./floatRGBA-090399ba.js";import"./normalizeUtilsSync-a801e3b6.js";import"./utils-63166b41.js";import"./featureConversionUtils-d2229ed4.js";import"./OptimizedFeature-73582c6e.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./json-48e3ea08.js";import"./labelingInfo-be3a629c.js";import"./labelUtils-4f4b54c6.js";import"./defaultsJSON-59981e75.js";import"./FeatureContainer-e57c4b30.js";import"./TileContainer-a618bf74.js";import"./TileKey-9cae9369.js";import"./Queue-275a6362.js";import"./visualVariablesUtils-c668eb89.js";import"./visualVariablesUtils-3304d1a5.js";import"./capabilities-d08b6e58.js";import"./Matcher-e07e835b.js";import"./TileStrategy-a5366189.js";import"./TileStore-8f580dbf.js";import"./rbush-8e36784a.js";import"./quickselect-322ec8e1.js";import"./Query-13124a97.js";import"./TimeExtent-2004eecf.js";import"./tileUtils-dbff68ee.js";import"./TileClipper-9381cfab.js";import"./Geometry-daada628.js";import"./GeometryUtils-c093d234.js";import"./earcut-58237617.js";import"./ExpandedCIM-5a2216e6.js";import"./devEnvironmentUtils-5002a058.js";import"./schemaUtils-5803029f.js";import"./LayerFloorInfo-e7c896e5.js";import"./createSymbolSchema-1bb8123a.js";import"./rendererUtils-c63e720f.js";import"./FeatureReductionLayer-1e5c4045.js";import"./OperationalLayer-1dad72ac.js";import"./util-0a217e96.js";import"./ComputedAttributeStorage-c1fec1a0.js";import"./FeatureSetReader-3d68adfe.js";import"./centroid-56c5816c.js";import"./FieldsIndex-16707836.js";import"./vec3f32-4322908d.js";import"./pixelUtils-cc2ca9c3.js";import"./vec2f64-30dc1443.js";import"./vec4f32-2f36231b.js";import"./ProgramTemplate-f021fc55.js";import"./StyleDefinition-7d58136b.js";import"./config-1337d16e.js";import"./programUtils-71c4f47c.js";import"./NestedMap-1b5db22e.js";import"./OrderIndependentTransparency-68bd812c.js";class l{constructor(t){if(t)this._ownsRctx=!1,this._rctx=t;else{if(l._instance)return l._instanceRefCount++,l._instance;l._instanceRefCount=1,l._instance=this,this._ownsRctx=!0;const e=document.createElement("canvas").getContext("webgl");e.getExtension("OES_texture_float"),this._rctx=new lt(e,{})}const r={applyProjection:!0,bilinear:!1,bicubic:!1},a=ht("raster/reproject","raster/reproject",new Map([["a_position",0]]),r);this._program=this._rctx.programCache.acquire(a.shaders.vertexShader,a.shaders.fragmentShader,a.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new pt(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,r,a=!1){const e=T(t.extent,r),o=new A({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:s,y:h}=st(o,r,t.extent);let m=(s+h)/2;const n=Math.round((e.xmax-e.xmin)/m),c=Math.round((e.ymax-e.ymin)/m);m=(e.width/n+e.height/c)/2;const b=new A({x:m,y:m,spatialReference:e.spatialReference}),w=nt({projectedExtent:e,srcBufferExtent:t.extent,pixelSize:b,hasWrapAround:!0,spacing:[16,16]}),y=mt(this._rctx,w),g=new N(this._rctx,{width:n,height:c,pixelFormat:M.RGBA,dataType:P.UNSIGNED_BYTE,wrapMode:$.CLAMP_TO_EDGE,samplingMode:q.LINEAR,hasMipmap:!1}),p=new gt(this._rctx,{colorTarget:ct.TEXTURE,depthStencilTarget:dt.NONE,width:n,height:c},g);if(this._rctx.bindFramebuffer(p),this._rctx.setViewport(0,0,n,c),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(y,1),this._quad.bind(),this._program.setUniform2f("u_srcImageSize",t.texture.descriptor.width,t.texture.descriptor.height),this._program.setUniform2fv("u_transformSpacing",w.spacing),this._program.setUniform2fv("u_transformGridSize",w.size),this._program.setUniform2f("u_targetImageSize",n,c),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),y.dispose(),a){const u=new ImageData(p.descriptor.width,p.descriptor.height);return p.readPixels(0,0,p.descriptor.width,p.descriptor.height,M.RGBA,P.UNSIGNED_BYTE,u.data),p.detachColorTexture(G.COLOR_ATTACHMENT0),p.dispose(),{texture:g,extent:e,imageData:u}}return p.detachColorTexture(G.COLOR_ATTACHMENT0),p.dispose(),{texture:g,extent:e}}reprojectBitmapData(t,r){const a=tt(t.bitmapData)?it(t.bitmapData):t.bitmapData,e=new N(this._rctx,{width:t.bitmapData.width,height:t.bitmapData.height,pixelFormat:M.RGBA,dataType:P.UNSIGNED_BYTE,wrapMode:$.CLAMP_TO_EDGE,samplingMode:q.LINEAR,hasMipmap:!1},a),o=this.reprojectTexture({texture:e,extent:t.extent},r,!0);o.texture.dispose();const s=document.createElement("canvas");return s.width=o.imageData.width,s.height=o.imageData.height,s.getContext("2d").putImageData(o.imageData,0,0),{bitmapData:s,extent:o.extent}}async loadAndReprojectBitmapData(t,r,a){const e=(await z(t,{responseType:"image"})).data,o=document.createElement("canvas");o.width=e.width,o.height=e.height;const s=o.getContext("2d");s.drawImage(e,0,0);const h=s.getImageData(0,0,o.width,o.height);if(r.spatialReference.equals(a))return{bitmapData:h,extent:r};const m=this.reprojectBitmapData({bitmapData:h,extent:r},a);return{bitmapData:m.bitmapData,extent:m.extent}}destroy(){this._ownsRctx?(l._instanceRefCount--,l._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),l._instance=null)):(this._quad.dispose(),this._program.dispose())}}l._instanceRefCount=0;class B{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let d=class extends ot(at){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new rt,this._kmlVisualData=new B,this.allVisiblePoints=new I,this.allVisiblePolylines=new I,this.allVisiblePolygons=new I,this.allVisibleMapImages=new Y}async hitTest(i,t){var a,e,o;const r=this.layer;return[(a=this._pointsView)==null?void 0:a.hitTest(i),(e=this._polylinesView)==null?void 0:e.hitTest(i),(o=this._polygonsView)==null?void 0:o.hitTest(i)].flat().filter(Boolean).map(s=>(s.layer=r,s.sourceLayer=r,{type:"graphic",graphic:s,layer:r,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new R({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new D(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new R({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new D(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new R({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new D(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.handles.add([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),K(()=>this.layer.visibleSublayers,i=>{for(const[t,r]of this._kmlVisualData.allSublayers)r.visibility=0;for(const t of i){const r=this._kmlVisualData.allSublayers.get(t.id);r&&(r.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new l}detach(){this._fetchController.abort(),this._fetchController=null,this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null),this._imageReprojector&&(this._imageReprojector.destroy(),this._imageReprojector=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,L.fromJSON(i.extent),this.view.spatialReference).then(t=>{const r=new et(t.bitmapData,{immutable:!1,requestRenderOnSourceChangedEnabled:!0});r.x=t.extent.xmin,r.y=t.extent.ymax,r.resolution=t.extent.width/t.bitmapData.width,r.rotation=i.rotation,this._mapImageContainer.addChild(r),this._bitmapIndex.set(i,r)})}async _getViewDependentUrl(i,t){const{viewFormat:r,viewBoundScale:a,httpQuery:e}=i;if(S(r)){if(H(t))throw new Error("Loading this network link requires a view state.");let o;if(await J(),S(a)&&a!==1){const _=new L(t.extent);_.expand(a),o=_}else o=t.extent;o=T(o,j.WGS84);const s=T(o,j.WebMercator),h=o.xmin,m=o.xmax,n=o.ymin,c=o.ymax,b=t.size[0]*t.pixelRatio,w=t.size[1]*t.pixelRatio,y=Math.max(s.width,s.height),g={"[bboxWest]":h.toString(),"[bboxEast]":m.toString(),"[bboxSouth]":n.toString(),"[bboxNorth]":c.toString(),"[lookatLon]":o.center.x.toString(),"[lookatLat]":o.center.y.toString(),"[lookatRange]":y.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":o.center.x.toString(),"[lookatTerrainLat]":o.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":o.center.x.toString(),"[cameraLat]":o.center.y.toString(),"[cameraAlt]":y.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":b.toString(),"[vertPixels]":w.toString(),"[terrainEnabled]":"0","[clientVersion]":F,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},p=_=>{for(const E in _)for(const k in g)_[E]=_[E].replace(k,g[k])},u=U(r);p(u);let V={};S(e)&&(V=U(e),p(V));const v=Z(i.href);return v.query={...v.query,...u,...V},`${v.path}?${W(u)}`}return i.href}async _fetchService(i){const t=new B;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!t.visibility&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,r){return this._fetchParsedKML(i,r).then(async a=>{for(const e of a.sublayers){t.allSublayers.set(e.id,e);const o=e.points?await C(e.points):[],s=e.polylines?await C(e.polylines):[],h=e.polygons?await C(e.polygons):[],m=e.mapImages||[];if(t.allPoints.push(...o.map(n=>({item:n,sublayerId:e.id}))),t.allPolylines.push(...s.map(n=>({item:n,sublayerId:e.id}))),t.allPolygons.push(...h.map(n=>({item:n,sublayerId:e.id}))),t.allMapImages.push(...m.map(n=>({item:n,sublayerId:e.id}))),e.networkLink){const n=await this._getViewDependentUrl(e.networkLink,this.view.state);await this._loadVisualData(n,t,r)}}})}_fetchParsedKML(i,t){return Q(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(r=>X(r.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};x([f()],d.prototype,"_pointsView",void 0),x([f()],d.prototype,"_polylinesView",void 0),x([f()],d.prototype,"_polygonsView",void 0),x([f()],d.prototype,"updating",void 0),d=x([O("esri.views.2d.layers.KMLLayerView2D")],d);const Ir=d;export{Ir as default};
